{"entries":[{"timestamp":1728628200421,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"device_button_event\" x=\"124\" y=\"173\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"IML_DPS310_GetTemprature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"406\" y=\"175\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow><block type=\"IML_DPS310_GetPressure\"></block></value></block></statement"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\""],[0,"></b"]],"start1":12,"start2":12,"length1":767,"length2":103},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_DPS310.GetTemprature())\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.showNumber(IML_DPS310.GetPressure())\n})\nbasic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":227,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"dps310.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\""],[1,"\n    ],\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":217,"start2":217,"length1":70,"length2":44}]},{"type":"added","filename":"dps310.ts","value":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"DPS310\"\nnamespace IML_DPS310\n{\n    //% block\n    //% block=\"気圧\"\n    //% weight=100    \n    export function GetPressure(): number {\n        return Math.round(readPressure() * 10) / 10\n    }\n    //% block\n    //% block=\"温度\"\n    //% weight=100    \n    export function GetTemprature(): number {\n        return Math.round(readTemperature() * 10) / 10\n    }\n\n    let DPS310_ADDR = 0x77\n    let PRESSURE_REG_ADDR = 0x00  // プレッシャーデータの開始アドレス\n    let TEMP_REG_ADDR = 0x03      // 温度データの開始アドレス\n    initDPS310()\n    \n    // DPS310の初期化\n    function initDPS310() {\n        // 必要に応じて初期設定を行います\n        // ここでは初期設定に必要なコマンドを送信します\n        pins.i2cWriteNumber(DPS310_ADDR, 0x06, NumberFormat.UInt8BE)\n        basic.pause(10)\n    }\n\n    // 3バイトのデータを読み取り、24ビットに変換する関数\n    function read24BitData(register: number): number {\n        pins.i2cWriteNumber(DPS310_ADDR, register, NumberFormat.UInt8BE)\n\n        let msb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE) << 16\n        let csb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE) << 8\n        let lsb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE)\n\n        let rawData = msb | csb | lsb\n        // 符号を判定（24ビット符号付き整数）\n        if (rawData & 0x800000) {\n            rawData = rawData - 0x1000000\n        }\n\n        return rawData\n    }\n\n    // DPS310から気圧を取得する関数\n    function readPressure(): number {\n        let rawPressure = read24BitData(PRESSURE_REG_ADDR)\n        let pressure = rawPressure / 100  // 補正。実際にはデータシートに基づく補正が必要です\n        return pressure\n    }\n\n    // DPS310から温度を取得する関数\n    function readTemperature(): number {\n        let rawTemp = read24BitData(TEMP_REG_ADDR)\n        let temperature = rawTemp / 100  // 補正。実際にはデータシートに基づく補正が必要です\n        return temperature\n    }\n}\n"}]},{"timestamp":1728628777406,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":266,"start2":266,"length1":17,"length2":21}]},{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"8BE)"],[-1,"\n        console.log(msb)\n        console.log(csb)\n        console.log(lsb)"],[0,"\n\n  "]],"start1":1168,"start2":1168,"length1":83,"length2":8},{"diffs":[[0,"0\n        }\n"],[1,"\n"],[0,"        retu"]],"start1":1316,"start2":1316,"length1":24,"length2":25}]}]},{"timestamp":1728629330317,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"g(lsb)\n\n"],[-1,"\n"],[0,"        "]],"start1":1241,"start2":1241,"length1":17,"length2":16}]}]},{"timestamp":1728630055673,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"b)\n\n"],[-1,"        let buffer = pins.i2cReadBuffer(DPS310_ADDR, 3, false)\n        let rawData = (buffer[0] << 16) | (buffer[1] << 8) | buffer[2]\n"],[0,"\n   "]],"start1":1245,"start2":1245,"length1":142,"length2":8}]}]},{"timestamp":1728630055903,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"Int8BE)\n"],[-1,"/*"],[0,"\n       "]],"start1":937,"start2":937,"length1":18,"length2":16},{"diffs":[[0,"sb)\n"],[-1,"        let rawData = msb | csb | lsb\n*/"],[0,"\n"],[1,""],[0,"    "]],"start1":1244,"start2":1244,"length1":49,"length2":9},{"diffs":[[0,"se)\n"],[-1,"        console.log(buffer)\n"],[0,"    "]],"start1":1308,"start2":1308,"length1":36,"length2":8},{"diffs":[[0,"fer[2]\n\n"],[1,"        let rawData = msb | csb | lsb\n"],[0,"        "]],"start1":1376,"start2":1376,"length1":16,"length2":54}]}]},{"timestamp":1728630137772,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"0x77"],[-1,"; // I2C address for DPS310\n    let DPS310_RESET = 0x0C;\n    let DPS310_PRODREVID = 0x0D;\n    let DPS310_MEASCFG = 0x08;\n    let DPS310_TEMP_CFG = 0x09;\n    let DPS310_PRS_CFG"],[1,"\n    let PRESSURE_REG_ADDR = 0x00  // プレッシャーデータの開始アドレス\n    let TEMP_REG_ADDR"],[0," = 0x0"],[-1,"6;\n"],[1,"3"],[0,"    "],[-1,"let DPS310_CFG_REG = 0x09;"],[1,"  // 温度データの開始アドレス"],[0,"\n    "],[-1,"let "],[1,"init"],[0,"DPS310"],[-1,"_COEF = 0x10; // Calibration coefficients start here\n\n    // Calibration coefficients\n    let c0, c1, c00, c10, c01, c11, c20, c21, c30;\n\n    // Utility function for 2's complement conversion\n    function twosComplement(value, bits) {\n        if (value & (1 << (bits - 1))) {\n            value -= (1 << bits);\n        }\n        return value;"],[1,"()\n    \n    // DPS310の初期化\n    function initDPS310() {\n        // 必要に応じて初期設定を行います"],[0,"\n    "],[-1,"}\n\n"],[0,"    // "],[-1,"Initialize DPS310\n    function initializeDPS310() {"],[1,"ここでは初期設定に必要なコマンドを送信します"],[0,"\n   "]],"start1":445,"start2":445,"length1":644,"length2":241},{"diffs":[[0,"PS310_ADDR, "],[-1,"DPS310_RESET"],[1,"0x06"],[0,", NumberForm"]],"start1":712,"start2":712,"length1":36,"length2":28},{"diffs":[[0,"rFormat.UInt8BE)"],[-1,";"],[0,"\n        basic.p"]],"start1":735,"start2":735,"length1":33,"length2":32},{"diffs":[[0,"(10)"],[-1,"; // Wait for reset\n\n        // Read and validate product ID"],[1,"\n    }\n\n    // 3バイトのデータを読み取り、24ビットに変換する関数\n    function read24BitData(register: number): number {"],[0,"\n   "]],"start1":771,"start2":771,"length1":68,"length2":104},{"diffs":[[0,"DR, "],[-1,"DPS310_PRODREVID"],[1,"register"],[0,", Nu"]],"start1":909,"start2":909,"length1":24,"length2":16},{"diffs":[[0,"rFormat.UInt8BE)"],[-1,";"],[1,"\n/*"],[0,"\n        let pro"]],"start1":928,"start2":928,"length1":33,"length2":35},{"diffs":[[0,"    let "],[-1,"prodID"],[1,"msb"],[0," = pins."]],"start1":952,"start2":952,"length1":22,"length2":19},{"diffs":[[0,"8BE)"],[-1,";\n        if (prodID !== 0x10) {\n            serial.writeLine(\"DPS310 not found!\");\n            return;\n        }\n\n        resetDPS310();\n        readCalibrationCoefficients();\n        configureSensor();\n    }\n\n    // Reset DPS310\n    function resetDPS310() {\n       "],[1," << 16\n        let csb ="],[0," pin"]],"start1":1015,"start2":1015,"length1":275,"length2":32},{"diffs":[[0,"t csb = pins.i2c"],[-1,"Write"],[1,"Read"],[0,"Number(DPS310_AD"]],"start1":1036,"start2":1036,"length1":37,"length2":36},{"diffs":[[0,"DDR,"],[-1," DPS310_RESET,"],[0," Num"]],"start1":1071,"start2":1071,"length1":22,"length2":8},{"diffs":[[0,"8BE)"],[-1,";\n        basic.pause(10); // Allow time to reset\n    }\n\n    // Read calibration coefficients\n    function readCalibrationCoefficients() {\n       "],[1," << 8\n        let lsb ="],[0," pin"]],"start1":1093,"start2":1093,"length1":154,"length2":31},{"diffs":[[0,"t lsb = pins.i2c"],[-1,"Write"],[1,"Read"],[0,"Number(DPS310_AD"]],"start1":1113,"start2":1113,"length1":37,"length2":36},{"diffs":[[0,"DDR,"],[-1," DPS310_COEF,"],[0," Num"]],"start1":1148,"start2":1148,"length1":21,"length2":8},{"diffs":[[0,"rFormat.UInt8BE)"],[-1,";"],[0,"\n        let coe"]],"start1":1158,"start2":1158,"length1":33,"length2":32},{"diffs":[[0,"    "],[-1,"let coef = pins.i2cReadBuffer(DPS310_ADDR, 18);\n        c0 = twosComplement((coef[0] << 4) | (coef[1] >> 4), 12);\n        c1 = twosComplement(((coef[1] & 0x0F) << 8) | coef[2], 12);\n        c00 = twosComplement((coef[3] << 12) | (coef[4] << 4) | (coef[5] >> 4), 20);\n        c10 = twosComplement(((coef[5] & 0x0F) << 16) | (coef[6] << 8) | coef[7], 20);\n        c01 = twosComplement((coef[8] << 8) | coef[9], 16);\n        c11 = twosComplement((coef[10] << 8) | coef[11], 16);\n        c20 = twosComplement((coef[12] << 8) | coef[13], 16);\n        c21 = twosComplement((coef[14] << 8) | coef[15], 16);\n        c30 = twosComplement((coef"],[1,"console.log(msb)\n        console.log(csb)\n        console.log(lsb)\n        let rawData = msb | csb | lsb\n*/\n        let buffer = pins.i2cReadBuffer(DPS310_ADDR, 3, false)\n        console.log(buffer)\n        let rawData = (buffer[0] << 16) | (buffer"],[0,"[1"],[-1,"6"],[0,"] <<"]],"start1":1179,"start2":1179,"length1":645,"length2":258},{"diffs":[[0,") | "],[-1,"coef[17], 16);"],[1,"buffer[2]\n"],[0,"\n    "],[-1,"}\n\n"],[0,"    // "],[-1,"Configure the sensor\n    function configureSensor() {\n        // Example setup - adjust to preferred settings\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_PRS_CFG, NumberFormat.UInt8BE); // Pressure config\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_TEMP_CFG, NumberFormat.UInt8BE); // Temperature config\n    }\n\n    // Read temperature\n    function readTemperature() {\n        let rawTemp = readRawData(DPS310_TEMP_CFG);\n        return calculateTemperature(rawTemp);\n    }\n\n    // Read pressure"],[1,"符号を判定（24ビット符号付き整数）\n        if (rawData & 0x800000) {\n            rawData = rawData - 0x1000000\n        }\n        return rawData\n    }\n\n    // DPS310から気圧を取得する関数"],[0,"\n   "]],"start1":1439,"start2":1439,"length1":538,"length2":189},{"diffs":[[0,"essure()"],[1,": number"],[0," {\n     "]],"start1":1644,"start2":1644,"length1":16,"length2":24},{"diffs":[[0,"read"],[-1,"RawData(DPS310_MEASCFG);"],[1,"24BitData(PRESSURE_REG_ADDR)"],[0,"\n   "]],"start1":1689,"start2":1689,"length1":32,"length2":36},{"diffs":[[0,"    "],[-1,"return calculateP"],[1,"let p"],[0,"ressure"],[-1,"("],[1," = "],[0,"rawP"]],"start1":1726,"start2":1726,"length1":33,"length2":23},{"diffs":[[0,"sure"],[-1,");\n    }\n\n    // Read raw data from a specific register\n    function readRawData(register) {\n        pins.i2cWriteNumber(DPS310_ADDR, register, NumberFormat.UInt8BE);\n        let data = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt24BE);\n        return twosComplement(data, 24);\n    }\n\n    // Calculate temperature"],[1," / 100  // 補正。実際にはデータシートに基づく補正が必要です\n        return pressure\n    }\n\n    // DPS310から温度を取得する関数"],[0,"\n   "]],"start1":1752,"start2":1752,"length1":326,"length2":99},{"diffs":[[0,"unction "],[-1,"calculate"],[1,"read"],[0,"Temperat"]],"start1":1853,"start2":1853,"length1":25,"length2":20},{"diffs":[[0,"ure("],[-1,"rawTemp)"],[1,"): number"],[0," {\n "]],"start1":1873,"start2":1873,"length1":16,"length2":17},{"diffs":[[0,"    "],[-1,"return c0 + c1 * rawTemp;\n    }\n\n    // Calculate pressure\n    function calculatePressure(rawPressure) {"],[1,"let rawTemp = read24BitData(TEMP_REG_ADDR)"],[0,"\n   "]],"start1":1893,"start2":1893,"length1":112,"length2":50},{"diffs":[[0,"    "],[-1,"return c00 + rawPressure * (c10 + rawPressure * (c20 + rawPressure * c30));"],[1,"let temperature = rawTemp / 100  // 補正。実際にはデータシートに基づく補正が必要です"],[0,"\n    "],[-1,"}\n\n"],[0,"    "],[-1,"// Initialize sensor\n    initializeDPS310();"],[1,"return temperature\n    }"],[0,"\n}\n"]],"start1":1944,"start2":1944,"length1":138,"length2":100}]}]},{"timestamp":1728631337733,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"\n    }\n\n"],[-1,"\n\n"],[0,"    // C"]],"start1":3553,"start2":3553,"length1":18,"length2":16}]}]},{"timestamp":1728631468259,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ariables><block "],[1,"type=\"device_forever\" x=\"0\" y=\"0\"></block><block "],[0,"type=\"device_but"]],"start1":69,"start2":69,"length1":32,"length2":81},{"diffs":[[0," x=\""],[-1,"20"],[1,"124"],[0,"\" y=\""],[-1,"20"],[1,"173"],[0,"\"><f"]],"start1":160,"start2":160,"length1":17,"length2":19},{"diffs":[[0," name=\"number\"><"],[1,"shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><"],[0,"block type=\"IML_"]],"start1":277,"start2":277,"length1":32,"length2":95},{"diffs":[[0," x=\""],[-1,"287"],[1,"406"],[0,"\" y=\""],[-1,"20"],[1,"175"],[0,"\"><f"]],"start1":471,"start2":471,"length1":18,"length2":19},{"diffs":[[0,"umber\"><"],[1,"shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow><"],[0,"block ty"]],"start1":596,"start2":596,"length1":16,"length2":116},{"diffs":[[0,"ck><"],[-1,"block type=\"device_forever\" x=\"20\" y=\"196\"></block><"],[0,"/xml"]],"start1":781,"start2":781,"length1":60,"length2":8}]},{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"\n    }\n\n"],[-1,"\n"],[0,"    let "]],"start1":415,"start2":415,"length1":17,"length2":16},{"diffs":[[0,"t c0"],[-1," = 0\n    let c1 = 0\n    let c00 = 0\n    let c10 = 0\n    let c01 = 0\n    let c11 = 0\n    let c20 = 0\n    let c21 = 0\n    let c30 = "],[1,", c1, c00, c10, c01, c11, c20, c21, c3"],[0,"0;\n\n"]],"start1":770,"start2":770,"length1":138,"length2":46},{"diffs":[[0,"alue"],[-1,":number, bits:number"],[1,", bits"],[0,") {\n"]],"start1":899,"start2":899,"length1":28,"length2":14},{"diffs":[[0,"ster\n   "],[1," "],[0,"function"]],"start1":3322,"start2":3322,"length1":16,"length2":17},{"diffs":[[0,"register"],[-1,":number"],[0,") {\n    "]],"start1":3352,"start2":3352,"length1":23,"length2":16},{"diffs":[[0,"ormat.UInt8BE);\n"],[-1,"\n"],[0,"        let msb "]],"start1":3422,"start2":3422,"length1":33,"length2":32},{"diffs":[[0,"let "],[-1,"msb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        let csb"],[1,"data"],[0," = p"]],"start1":3446,"start2":3446,"length1":84,"length2":12},{"diffs":[[0,"umberFormat.UInt"],[-1,"8"],[1,"24"],[0,"BE);\n        let"]],"start1":3490,"start2":3490,"length1":33,"length2":34},{"diffs":[[0,"    "],[-1,"let lsb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n\n        // Reassemble into 24-bit value and handle as signed 24-bit\n        let rawData = (msb << 16) | (csb << 8) | lsb;\n        if (rawData & 0x800000) { // If the 24th bit is set, the value is negative\n            rawData -= 0x1000000;\n        }\n        return rawData;\n    }"],[1,"return twosComplement(data, 24);\n    }\n\n"],[0,"\n\n  "]],"start1":3517,"start2":3517,"length1":352,"length2":48},{"diffs":[[0,"(rawTemp"],[-1,":number"],[0,") {\n    "]],"start1":3625,"start2":3625,"length1":23,"length2":16},{"diffs":[[0,"    "],[-1,"let dat ="],[1,"return"],[0," c0 "]],"start1":3641,"start2":3641,"length1":17,"length2":14},{"diffs":[[0,"mp;\n"],[-1,"        console.log(dat)\n        return dat\n"],[0,"    "]],"start1":3667,"start2":3667,"length1":52,"length2":8},{"diffs":[[0,"sure"],[-1,":number"],[0,") {\n"]],"start1":3742,"start2":3742,"length1":15,"length2":8}]}]},{"timestamp":1728632021305,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"        "],[-1,"let dat ="],[1,"return"],[0," c00 + r"]],"start1":4300,"start2":4300,"length1":25,"length2":22},{"diffs":[[0,"));\n"],[-1,"        console.log(dat)\n        return dat\n"],[0,"    "]],"start1":4380,"start2":4380,"length1":52,"length2":8}]}]},{"timestamp":1728632097705,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"    "],[-1,"console,"],[0,"seri"]],"start1":1552,"start2":1552,"length1":16,"length2":8}]}]},{"timestamp":1728634196947,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0," console"],[-1,"."],[1,","],[0,"serial.w"]],"start1":1555,"start2":1555,"length1":17,"length2":17}]}]},{"timestamp":1728634198079,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ent\" x=\""],[1,"2"],[0,"0\" y=\""],[1,"2"],[0,"0\"><fiel"]],"start1":107,"start2":107,"length1":22,"length2":24},{"diffs":[[0,"x=\"2"],[-1,"6"],[1,"8"],[0,"7\" y=\""],[1,"2"],[0,"0\"><"]],"start1":358,"start2":358,"length1":15,"length2":16},{"diffs":[[0," x=\""],[1,"2"],[0,"0\" y=\"1"],[-1,"7"],[1,"9"],[0,"6\"><"]],"start1":597,"start2":597,"length1":16,"length2":17}]},{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"r {\n"],[-1,"        console.log(10000)\n"],[0,"    "]],"start1":197,"start2":197,"length1":35,"length2":8},{"diffs":[[0,"r {\n"],[-1,"        console.log(10001)\n"],[0,"    "]],"start1":357,"start2":357,"length1":35,"length2":8},{"diffs":[[0,"console."],[-1,"log"],[1,"serial.writeLine"],[0,"(\"DPS310"]],"start1":1556,"start2":1556,"length1":19,"length2":32},{"diffs":[[0,"  }\n"],[-1,"        console.log(rawData)\n"],[0,"    "]],"start1":4025,"start2":4025,"length1":37,"length2":8}]}]},{"timestamp":1728634560954,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"x0F) << "],[1,"16"],[0,") | (coe"]],"start1":2429,"start2":2429,"length1":16,"length2":18}]}]},{"timestamp":1728635446220,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0," & 0x0F) << "],[-1,"8"],[0,") | (coef[6]"]],"start1":2425,"start2":2425,"length1":25,"length2":24}]}]},{"timestamp":1728635447167,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"FG = 0x0"],[-1,"7"],[1,"8"],[0,";\n    le"]],"start1":614,"start2":614,"length1":17,"length2":17},{"diffs":[[0,"= 0x"],[-1,"F"],[0,"0"],[1,"9"],[0,";\n  "]],"start1":649,"start2":649,"length1":10,"length2":10},{"diffs":[[0,"= 0x"],[-1,"71"],[1,"06"],[0,";\n  "]],"start1":680,"start2":680,"length1":10,"length2":10},{"diffs":[[0,"    "],[-1,"pins.i2cWriteNumber(DPS310_ADDR, DPS310_RESET, NumberFormat.UInt8BE);\n        basic.pause(10); // Allow time to reset\n"],[1,"resetDPS310();"],[0,"\n   "]],"start1":1679,"start2":1679,"length1":126,"length2":22},{"diffs":[[0,"();\n"],[-1,"\n"],[0,"        "],[-1,"pins.i2cWriteNumber(DPS310_ADDR, DPS310_PRS_CFG, NumberFormat.UInt8BE); // Pressure config"],[1,"configureSensor();\n    }\n\n    // Reset DPS310\n    function resetDPS310() {"],[0,"\n   "]],"start1":1733,"start2":1733,"length1":107,"length2":90},{"diffs":[[0," DPS310_"],[-1,"TEMP_CFG"],[1,"RESET"],[0,", Number"]],"start1":1860,"start2":1860,"length1":24,"length2":21},{"diffs":[[0,"BE);"],[-1," // Temperature config"],[0,"\n    "],[-1,"}\n\n"],[0,"    "],[-1,"// Reset DPS310\n    function resetDPS310() {"],[1,"basic.pause(10); // Allow time to reset"],[0,"\n   "]],"start1":1893,"start2":1893,"length1":86,"length2":56},{"diffs":[[0,"(coef[0] << "],[-1,"8"],[1,"4"],[0,") | (coef[1]"]],"start1":2196,"start2":2196,"length1":25,"length2":25},{"diffs":[[0,"(coef[3] << "],[-1,"8"],[1,"12"],[0,") | (coef[4]"]],"start1":2331,"start2":2331,"length1":25,"length2":26},{"diffs":[[0,"(coef[4] << "],[-1,"8"],[1,"4"],[0,") | (coef[5]"]],"start1":2349,"start2":2349,"length1":25,"length2":25},{"diffs":[[0,"7], 16);\n    }\n\n"],[1,"    // Configure the sensor\n    function configureSensor() {\n        // Example setup - adjust to preferred settings\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_PRS_CFG, NumberFormat.UInt8BE); // Pressure config\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_TEMP_CFG, NumberFormat.UInt8BE); // Temperature config\n    }\n\n"],[0,"    // Read temp"]],"start1":2772,"start2":2772,"length1":32,"length2":358}]}]},{"timestamp":1728635920936,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0," DPS310_"],[-1,"PRS_"],[1,"MEAS"],[0,"CFG = 0x"]],"start1":601,"start2":601,"length1":20,"length2":20},{"diffs":[[0,"FG = 0x0"],[-1,"6"],[1,"7"],[0,";\n    le"]],"start1":614,"start2":614,"length1":17,"length2":17},{"diffs":[[0,"10_TEMP_CFG = 0x"],[1,"F"],[0,"0"],[-1,"7"],[0,";\n    let DPS310"]],"start1":637,"start2":637,"length1":34,"length2":34},{"diffs":[[0,"310_"],[-1,"MEAS"],[1,"PRS_"],[0,"CFG = 0x"],[-1,"08"],[1,"71"],[0,";\n  "]],"start1":668,"start2":668,"length1":22,"length2":22},{"diffs":[[0,"o reset\n"],[1,"\n"],[0,"        "]],"start1":1793,"start2":1793,"length1":16,"length2":17}]}]},{"timestamp":1728636155182,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"   }\n\n\n "],[1,"   let DPS310_ADDR = 0x77; // I2C address for DPS310\n    let DPS310_RESET = 0x0C;\n    let DPS310_PRODREVID = 0x0D;\n    let DPS310_PRS_CFG = 0x06;\n    let DPS310_TEMP_CFG = 0x07;\n    let DPS310_MEASCFG = 0x08;\n    let DPS310_CFG_REG = 0x09;\n    let DPS310_COEF = 0x10; // Calibration coefficients start here\n\n    // Calibration coefficients\n    let c0 = 0\n    let c1 = 0\n    let c00 = 0\n    let c10 = 0\n    let c01 = 0\n    let c11 = 0\n    let c20 = 0\n    let c21 = 0\n    let c30 = 0;\n\n    // Utility function for 2's complement conversion\n    function twosComplement(value:number, bits:number) {\n        if (value & (1 << (bits - 1))) {\n            value -= (1 << bits);\n        }\n        return value;\n    }\n\n    // Initialize DPS310\n    function initializeDPS310() {\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_RESET, NumberFormat.UInt8BE);\n        basic.pause(10); // Wait for reset\n\n        // Read and validate product ID\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_PRODREVID, NumberFormat.UInt8BE);\n        let prodID = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        if (prodID !== 0x10) {\n            console.log(\"DPS310 not found!\");\n            return;\n        }\n\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_RESET, NumberFormat.UInt8BE);\n        basic.pause(10); // Allow time to reset\n        readCalibrationCoefficients();\n\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_PRS_CFG, NumberFormat.UInt8BE); // Pressure config\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_TEMP_CFG, NumberFormat.UInt8BE); // Temperature config\n    }\n\n    // Reset DPS310\n    function resetDPS310() {\n    }\n\n    // Read calibration coefficients\n    function readCalibrationCoefficients() {\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_COEF, NumberFormat.UInt8BE);\n        let coef = pins.i2cReadBuffer(DPS310_ADDR, 18);\n        c0 = twosComplement((coef[0] << 8) | (coef[1] >> 4), 12);\n        c1 = twosComplement(((coef[1] & 0x0F) << 8) | coef[2], 12);\n        c00 = twosComplement((coef[3] << 8) | (coef[4] << 8) | (coef[5] >> 4), 20);\n        c10 = twosComplement(((coef[5] & 0x0F) << 8) | (coef[6] << 8) | coef[7], 20);\n        c01 = twosComplement((coef[8] << 8) | coef[9], 16);\n        c11 = twosComplement((coef[10] << 8) | coef[11], 16);\n        c20 = twosComplement((coef[12] << 8) | coef[13], 16);\n        c21 = twosComplement((coef[14] << 8) | coef[15], 16);\n        c30 = twosComplement((coef[16] << 8) | coef[17], 16);\n    }\n\n    // Read temperature\n    function readTemperature() {\n        let rawTemp = readRawData(DPS310_TEMP_CFG);\n        return calculateTemperature(rawTemp);\n    }\n\n    // Read pressure\n    function readPressure() {\n        let rawPressure = readRawData(DPS310_MEASCFG);\n        return calculatePressure(rawPressure);\n    }\n\n    // Read raw data from a specific register\n   function readRawData(register:number) {\n        pins.i2cWriteNumber(DPS310_ADDR, register, NumberFormat.UInt8BE);\n\n        let msb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        let csb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        let lsb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n\n        // Reassemble into 24-bit value and handle as signed 24-bit\n        let rawData = (msb << 16) | (csb << 8) | lsb;\n        if (rawData & 0x800000) { // If the 24th bit is set, the value is negative\n            rawData -= 0x1000000;\n        }\n        console.log(rawData)\n        return rawData;\n    }\n\n    // Calculate temperature\n    function calculateTemperature(rawTemp:number) {\n        let dat = c0 + c1 * rawTemp;\n        console.log(dat)\n        return dat\n    }\n\n    // Calculate pressure\n    function calculatePressure(rawPressure:number) {\n        let dat = c00 + rawPressure * (c10 + rawPressure * (c20 + rawPressure * c30));\n        console.log(dat)\n        return dat\n    }\n\n    // Initialize sensor\n    initializeDPS310();"],[0,"\n}\n"]],"start1":471,"start2":471,"length1":11,"length2":3921}]}]},{"timestamp":1728638845629,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"    }\n\n\n"],[1," "],[0,"\n}\n"]],"start1":470,"start2":470,"length1":11,"length2":12}]}]},{"timestamp":1728638847281,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"ure(): number {\n"],[1,"        console.log(10000)\n"],[0,"        return M"]],"start1":185,"start2":185,"length1":32,"length2":59},{"diffs":[[0," * 10) / 10\n"],[-1,""],[0,"    }\n    //"]],"start1":268,"start2":268,"length1":24,"length2":24},{"diffs":[[0,"ure(): number {\n"],[1,"        console.log(10001)\n"],[0,"        return M"]],"start1":372,"start2":372,"length1":32,"length2":59},{"diffs":[[0,"}\n\n\n"],[-1,"    let ADDRESS = 0x77;\n    let PRESS_CONF = 0x71;\n    let TEMP_CONF = 0xF0;\n    let INT_AND_FIFO_CONF = 0x00;\n    let OP_MODE = 0x07;\n    let SCALE_FACTORS = [524288, 1572864, 3670016, 7864320, 253952, 516096, 1040384, 2088960];\n\n    // Calibration coefficients\n    let c0=0, c1=0, c00=0, c10=0, c01=0, c11=0, c20=0, c21=0, c30=0;\n\n    // 2's complement conversion for calibration data\n    function twosComplement(value:number, bits:number) {\n        if (value & (1 << (bits - 1))) {\n            value -= (1 << bits);\n        }\n        return value;\n    }\n\n    // Initialize DPS310 sensor\n    function initializeDPS310() {\n        pins.i2cWriteNumber(ADDRESS, 0x06, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(ADDRESS, PRESS_CONF, NumberFormat.UInt8BE);\n\n        pins.i2cWriteNumber(ADDRESS, 0x07, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(ADDRESS, TEMP_CONF, NumberFormat.UInt8BE);\n\n        pins.i2cWriteNumber(ADDRESS, 0x09, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(ADDRESS, INT_AND_FIFO_CONF, NumberFormat.UInt8BE);\n\n        pins.i2cWriteNumber(ADDRESS, 0x08, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(ADDRESS, OP_MODE, NumberFormat.UInt8BE);\n\n        readCalibrationCoefficients();\n    }\n\n    // Read calibration coefficients from DPS310\n    function readCalibrationCoefficients() {\n        pins.i2cWriteNumber(ADDRESS, 0x10, NumberFormat.UInt8BE);\n        let coef = pins.i2cReadBuffer(ADDRESS, 18);\n\n        c0 = twosComplement((coef[0] << 4) | (coef[1] >> 4), 12);\n        c1 = twosComplement(((coef[1] & 0x0F) << 8) | coef[2], 12);\n        c00 = twosComplement((coef[3] << 12) | (coef[4] << 4) | (coef[5] >> 4), 20);\n        c10 = twosComplement(((coef[5] & 0x0F) << 16) | (coef[6] << 8) | coef[7], 20);\n        c01 = twosComplement((coef[8] << 8) | coef[9], 16);\n        c11 = twosComplement((coef[10] << 8) | coef[11], 16);\n        c20 = twosComplement((coef[12] << 8) | coef[13], 16);\n        c21 = twosComplement((coef[14] << 8) | coef[15], 16);\n        c30 = twosComplement((coef[16] << 8) | coef[17], 16);\n    }\n\n    // Read 24-bit raw data from a register\n    function read24BitData(register:number) {\n        pins.i2cWriteNumber(ADDRESS, register, NumberFormat.UInt8BE);\n\n        let msb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n        let csb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n        let lsb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n\n        let rawData = (msb << 16) | (csb << 8) | lsb;\n        if (rawData & 0x800000) {\n            rawData -= 0x1000000;\n        }\n        return rawData;\n    }\n\n    // Calculate pressure using calibration coefficients\n    function calculatePressure(rawPressure:number) {\n        let prs = c00 + rawPressure * (c10 + rawPressure * (c20 + rawPressure * c30)) +\n            c01 * rawPressure + c11 * rawPressure;\n        return prs / SCALE_FACTORS[1];\n    }\n\n    // Calculate temperature using calibration coefficients\n    function calculateTemperature(rawTemperature:number) {\n        let temp = c0 * rawTemperature + c1;\n        return temp / SCALE_FACTORS[0];\n    }\n\n    function readPressure() : number\n    {\n        let rawPressure = read24BitData(0x00); // Replace 0x00 with actual register\n        return calculatePressure(rawPressure);\n    }\n\n    function readTemperature() :number\n    {\n        let rawTemperature = read24BitData(0x07); // Replace 0x07 with actual register\n        return calculateTemperature(rawTemperature);\n    }"],[0,"\n}\n"]],"start1":474,"start2":474,"length1":3479,"length2":7}]}]},{"timestamp":1728639182407,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"at.UInt8BE);"],[1,"\n\n        readCalibrationCoefficients();"],[0,"\n    }\n\n    "]],"start1":1593,"start2":1593,"length1":24,"length2":64},{"diffs":[[0,"(coef[0] << "],[-1,"8"],[1,"4"],[0,") | (coef[1]"]],"start1":1894,"start2":1894,"length1":25,"length2":25},{"diffs":[[0,"(coef[3] << "],[-1,"8"],[1,"12"],[0,") | (coef[4]"]],"start1":2029,"start2":2029,"length1":25,"length2":26},{"diffs":[[0,"f[4] << "],[1,"4"],[0,") | (coe"]],"start1":2051,"start2":2051,"length1":16,"length2":17},{"diffs":[[0," & 0x0F) << "],[-1,"8"],[1,"16"],[0,") | (coef[6]"]],"start1":2123,"start2":2123,"length1":25,"length2":26},{"diffs":[[0,"   }"],[-1,"\n\n    // main\n    initializeDPS310()\n    readCalibrationCoefficients()"],[0,"\n}\n"]],"start1":3892,"start2":3892,"length1":77,"length2":7}]}]},{"timestamp":1728639765460,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"(coef[4] << "],[-1,"8"],[0,") | (coef[5]"]],"start1":2006,"start2":2006,"length1":25,"length2":24},{"diffs":[[0,"mber"],[-1,", scaledT:number"],[0,") {\n"]],"start1":3078,"start2":3078,"length1":24,"length2":8},{"diffs":[[0,"    "],[-1,"scaledT * ("],[0,"c01 "]],"start1":3182,"start2":3182,"length1":19,"length2":8},{"diffs":[[0," c11"],[-1,") + scaledT * c21"],[1," * rawPressure"],[0,";\n  "]],"start1":3205,"start2":3205,"length1":25,"length2":22},{"diffs":[[0,"    "],[-1,"let scaledTemp = 0\n    let scaledPress = 0\n    function readSensor()"],[1,"function readPressure() : number"],[0,"\n   "]],"start1":3482,"start2":3482,"length1":76,"length2":40},{"diffs":[[0,"     let raw"],[-1,"Temperat"],[1,"Press"],[0,"ure = read24"]],"start1":3528,"start2":3528,"length1":32,"length2":29},{"diffs":[[0,"Data(0x0"],[-1,"7"],[1,"0"],[0,"); // Re"]],"start1":3560,"start2":3560,"length1":17,"length2":17},{"diffs":[[0,"lace 0x0"],[-1,"7"],[1,"0"],[0," with ac"]],"start1":3578,"start2":3578,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"scaledTemp = calculateTemperature(rawTemperature);\n"],[1,"return calculatePressure(rawPressure);\n    }\n\n    function readTemperature() :number\n    {"],[0,"\n   "]],"start1":3613,"start2":3613,"length1":59,"length2":98},{"diffs":[[0,"\n        let raw"],[-1,"Press"],[1,"Temperat"],[0,"ure = read24BitD"]],"start1":3707,"start2":3707,"length1":37,"length2":40},{"diffs":[[0,"ead24BitData(0x0"],[-1,"0"],[1,"7"],[0,"); // Replace 0x"]],"start1":3738,"start2":3738,"length1":33,"length2":33},{"diffs":[[0,"; // Replace 0x0"],[-1,"0"],[1,"7"],[0," with actual reg"]],"start1":3756,"start2":3756,"length1":33,"length2":33},{"diffs":[[0,"    "],[-1,"scaledPress = calculatePressure(rawPressure, scaledTemp"],[1,"return calculateTemperature(rawTemperature"],[0,");\n "]],"start1":3799,"start2":3799,"length1":63,"length2":50},{"diffs":[[0,"re);\n    }\n\n"],[-1,"\n"],[0,"    // main\n"]],"start1":3843,"start2":3843,"length1":25,"length2":24}]}]},{"timestamp":1728640357525,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"umber {\n"],[-1,"        readSensor()\n"],[0,"        "]],"start1":193,"start2":193,"length1":37,"length2":16},{"diffs":[[0,"h.round("],[-1,"scale"],[1,"rea"],[0,"dPress"],[1,"ure()"],[0," * 10) /"]],"start1":219,"start2":219,"length1":27,"length2":30},{"diffs":[[0,"  re"],[-1,"adSensor()\n        return Math.round(scaledTemp"],[1,"turn Math.round(readTemperature()"],[0," * 1"]],"start1":367,"start2":367,"length1":55,"length2":41},{"diffs":[[0,"et prs ="],[1," c00 +"],[0," rawPres"]],"start1":3112,"start2":3112,"length1":16,"length2":22},{"diffs":[[0,"ure "],[-1,"/ SCALE_FACTORS[1]\n        prs = c00 + prs * (c10 + prs * (c20 + prs"],[1,"* (c10 + rawPressure * (c20 + rawPressure"],[0," * c"]],"start1":3135,"start2":3135,"length1":76,"length2":49},{"diffs":[[0,"T * "],[1,"("],[0,"c01 "],[-1,"+ scaledT * prs * ("],[1,"* rawPressure + "],[0,"c11"],[1,")"],[0," + "],[-1,"prs"],[1,"scaledT"],[0," * c21"],[-1,")"],[1,";"],[0,"\n   "]],"start1":3209,"start2":3209,"length1":47,"length2":50},{"diffs":[[0,"turn prs"],[1," / SCALE_FACTORS[1]"],[0,";\n    }\n"]],"start1":3266,"start2":3266,"length1":16,"length2":35},{"diffs":[[0,"t temp ="],[1," c0 *"],[0," rawTemp"]],"start1":3431,"start2":3431,"length1":16,"length2":21},{"diffs":[[0,"ure "],[-1,"/ SCALE_FACTORS[0]\n        temp = c0 * 0.5 + c1 * temp"],[1,"+ c1"],[0,";\n  "]],"start1":3456,"start2":3456,"length1":62,"length2":12},{"diffs":[[0,"urn temp"],[1," / SCALE_FACTORS[0]"],[0,";\n    }\n"]],"start1":3477,"start2":3477,"length1":16,"length2":35}]}]},{"timestamp":1728640791716,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"ature);\n"],[-1,"        "],[0,"\n       "]],"start1":3787,"start2":3787,"length1":24,"length2":16},{"diffs":[[0,"    "],[-1,"    console.log(scaledPress)\n    "],[0,"}"],[1,"\n"],[0,"\n\n  "]],"start1":3946,"start2":3946,"length1":42,"length2":10}]}]},{"timestamp":1728641057046,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"Data(0x0"],[-1,"3"],[1,"7"],[0,"); // Re"]],"start1":3687,"start2":3687,"length1":17,"length2":17}]}]},{"timestamp":1728641393625,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"sb;\n"],[-1,"        rawData = twosComplement(rawData,24)\n"],[0,"    "]],"start1":2896,"start2":2896,"length1":53,"length2":8}]}]},{"timestamp":1728641928776,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"SS, "],[-1,"("],[0,"0x06"],[-1," << 8) |"],[1,", NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(ADDRESS,"],[0," PRE"]],"start1":1113,"start2":1113,"length1":21,"length2":73},{"diffs":[[0,"umberFormat.UInt"],[-1,"16"],[1,"8"],[0,"BE);\n"],[1,"\n"],[0,"        pins.i2c"]],"start1":1196,"start2":1196,"length1":39,"length2":39},{"diffs":[[0,"SS, "],[-1,"("],[0,"0x07"],[-1," << 8) |"],[1,", NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(ADDRESS,"],[0," TEM"]],"start1":1252,"start2":1252,"length1":21,"length2":73},{"diffs":[[0,"umberFormat.UInt"],[-1,"16"],[1,"8"],[0,"BE);\n"],[1,"\n"],[0,"        pins.i2c"]],"start1":1334,"start2":1334,"length1":39,"length2":39},{"diffs":[[0,"SS, "],[-1,"("],[0,"0x09"],[-1," << 8) |"],[1,", NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(ADDRESS,"],[0," INT"]],"start1":1390,"start2":1390,"length1":21,"length2":73},{"diffs":[[0,"rFormat.UInt"],[-1,"16"],[1,"8"],[0,"BE);\n"],[1,"\n"],[0,"        pins"]],"start1":1484,"start2":1484,"length1":31,"length2":31},{"diffs":[[0,"SS, "],[-1,"("],[0,"0x08"],[-1," << 8) |"],[1,", NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(ADDRESS,"],[0," OP_"]],"start1":1536,"start2":1536,"length1":21,"length2":73},{"diffs":[[0,"mat.UInt"],[-1,"16"],[1,"8"],[0,"BE);\n   "]],"start1":1624,"start2":1624,"length1":18,"length2":17},{"diffs":[[0,"ata,24)\n"],[1,"        if (rawData & 0x800000) {\n            rawData -= 0x1000000;\n        }\n"],[0,"        "]],"start1":2937,"start2":2937,"length1":16,"length2":94},{"diffs":[[0,"ess)\n    }\n\n"],[1,""],[0,"    // main\n"]],"start1":4027,"start2":4027,"length1":24,"length2":24},{"diffs":[[0,"ain\n"],[-1,"    basic.pause(10)\n"],[0,"    "]],"start1":4047,"start2":4047,"length1":28,"length2":8}]}]},{"timestamp":1728642530176,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,") {\n"],[-1,"/*\n"],[0,"    "]],"start1":1528,"start2":1528,"length1":11,"length2":8}]}]},{"timestamp":1728642621451,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"ure(): number {\n"],[1,"        readSensor()\n"],[0,"        return M"]],"start1":185,"start2":185,"length1":32,"length2":53},{"diffs":[[0,"ure(): number {\n"],[1,"        readSensor()\n"],[0,"        return M"]],"start1":363,"start2":363,"length1":32,"length2":53},{"diffs":[[0,"icients() {\n"],[1,"/*\n"],[0,"        pins"]],"start1":1520,"start2":1520,"length1":24,"length2":27},{"diffs":[[0,"ate "],[-1,"temperat"],[1,"press"],[0,"ure "]],"start1":2785,"start2":2785,"length1":16,"length2":13},{"diffs":[[0,"late"],[-1,"Temperature(raw"],[1,"Pressure(rawPressure:number, scaled"],[0,"T:"],[-1," "],[0,"numb"]],"start1":2847,"start2":2847,"length1":26,"length2":45},{"diffs":[[0,"let "],[-1,"temp"],[1,"prs"],[0," = raw"],[-1,"T"],[1,"Pressure"],[0," / S"]],"start1":2906,"start2":2906,"length1":19,"length2":25},{"diffs":[[0,"FACTORS["],[-1,"0"],[1,"1"],[0,"]\n      "]],"start1":2936,"start2":2936,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"temp"],[1,"prs"],[0," = c0"],[-1," * 0.5 + c1 * temp;"],[1,"0 + prs * (c10 + prs * (c20 + prs * c30)) +\n            scaledT * c01 + scaledT * prs * (c11 + prs * c21)"],[0,"\n   "]],"start1":2951,"start2":2951,"length1":36,"length2":121},{"diffs":[[0,"urn "],[-1,"temp"],[1,"prs"],[0,";\n  "]],"start1":3080,"start2":3080,"length1":12,"length2":11},{"diffs":[[0,"   // Calculate "],[-1,"press"],[1,"temperat"],[0,"ure using calibr"]],"start1":3097,"start2":3097,"length1":37,"length2":40},{"diffs":[[0,"late"],[-1,"Pressure(rawP:number, scaledT"],[1,"Temperature(rawTemperature"],[0,":num"]],"start1":3174,"start2":3174,"length1":37,"length2":34},{"diffs":[[0,"    let "],[-1,"prs"],[1,"temp"],[0," = raw"],[-1,"P"],[1,"Temperature"],[0," / SCALE"]],"start1":3219,"start2":3219,"length1":26,"length2":37},{"diffs":[[0,"/ SCALE_FACTORS["],[-1,"1"],[1,"0"],[0,"]\n        prs = "]],"start1":3249,"start2":3249,"length1":33,"length2":33},{"diffs":[[0,"    "],[-1,"prs"],[1,"temp"],[0," = c0"],[-1,"0 + prs * (c10 + prs * (c20 + prs * c30)) +\n            scaledT * c01 + scaledT * prs * (c11 + prs * c21)"],[1," * 0.5 + c1 * temp;"],[0,"\n   "]],"start1":3272,"start2":3272,"length1":121,"length2":36},{"diffs":[[0,"\n        return "],[-1,"prs"],[1,"temp"],[0,";\n    }\n\n\n    //"]],"start1":3304,"start2":3304,"length1":35,"length2":36},{"diffs":[[0," }\n\n"],[-1,"\n    // main\n    basic.pause(10)\n    initializeDPS310()\n    readCalibrationCoefficients()\n"],[0,"    "]],"start1":3329,"start2":3329,"length1":98,"length2":8},{"diffs":[[0,"    "],[-1,"basic.forever(function()"],[1,"function readSensor()\n   "],[0," {\n "]],"start1":3380,"start2":3380,"length1":32,"length2":33},{"diffs":[[0,"ature);\n"],[1,"        "],[0,"\n       "]],"start1":3550,"start2":3550,"length1":16,"length2":24},{"diffs":[[0,"dTemp);\n"],[-1,"\n"],[0,"        "]],"start1":3709,"start2":3709,"length1":17,"length2":16},{"diffs":[[0,"s)\n    }"],[1,"\n\n    // main\n    basic.pause(10)\n    initializeDPS310()\n    readCalibrationCoefficients("],[0,")\n}\n"]],"start1":3747,"start2":3747,"length1":12,"length2":101}]}]},{"timestamp":1728643148711,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"g(scaled"],[-1,"Temp"],[1,"Press"],[0,")\n    })"]],"start1":3739,"start2":3739,"length1":20,"length2":21}]}]},{"timestamp":1728643229294,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"aledTemp);\n\n"],[1,"        console.log(scaledTemp)\n"],[0,"    })\n}\n"]],"start1":3709,"start2":3709,"length1":21,"length2":53}]}]},{"timestamp":1728644789926,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"ter\n"],[-1,"        console.log(scaledTemp)\n"],[0,"    "]],"start1":3650,"start2":3650,"length1":40,"length2":8}]}]},{"timestamp":1728644792275,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"actual register\n"],[1,"        console.log(scaledTemp)\n"],[0,"        scaledPr"]],"start1":3638,"start2":3638,"length1":32,"length2":64},{"diffs":[[0,");\n\n"],[-1,"        console.log(scaledPress)\n"],[0,"    "]],"start1":3749,"start2":3749,"length1":41,"length2":8}]}]},{"timestamp":1728645315012,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"number, "],[1,"scaled"],[0,"T:number"]],"start1":3038,"start2":3038,"length1":16,"length2":22}]}]},{"timestamp":1728646043132,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"number, "],[-1,"raw"],[0,"T:number"]],"start1":3038,"start2":3038,"length1":19,"length2":16}]}]},{"timestamp":1728646044529,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"ate "],[-1,"press"],[1,"temperat"],[0,"ure "]],"start1":2740,"start2":2740,"length1":13,"length2":16},{"diffs":[[0,"late"],[-1,"Pressure(rawP:number, "],[1,"Temperature("],[0,"rawT:"],[1," "],[0,"numb"]],"start1":2805,"start2":2805,"length1":35,"length2":26},{"diffs":[[0,"let "],[-1,"prs = rawP / SCALE_FACTORS[0]\n        let "],[0,"t"],[1,"e"],[0,"mp ="]],"start1":2845,"start2":2845,"length1":51,"length2":10},{"diffs":[[0,"    "],[-1,"prs"],[1,"temp"],[0," = c0"],[-1,"0 + prs * (c10 + prs * (c20 + prs * c30)) +\n            tmp * c01 + tmp * prs * (c11 + prs * c21)"],[1," * 0.5 + c1 * temp;"],[0,"\n   "]],"start1":2884,"start2":2884,"length1":113,"length2":36},{"diffs":[[0,"urn "],[-1,"prs"],[1,"temp"],[0,";\n    }\n"],[1,"\n"],[0,"    "]],"start1":2928,"start2":2928,"length1":19,"length2":21},{"diffs":[[0,"/ Calculate "],[-1,"temperat"],[1,"press"],[0,"ure using ca"]],"start1":2950,"start2":2950,"length1":32,"length2":29},{"diffs":[[0,"alculate"],[-1,"Temperature("],[1,"Pressure(rawP:number, "],[0,"rawT:"],[-1," "],[0,"number) "]],"start1":3016,"start2":3016,"length1":34,"length2":43},{"diffs":[[0,"        let "],[-1,"temp"],[1,"prs"],[0," = raw"],[-1,"T"],[1,"P"],[0," / SCALE_FAC"]],"start1":3061,"start2":3061,"length1":35,"length2":34},{"diffs":[[0,"/ SCALE_FACTORS["],[-1,"0"],[1,"1"],[0,"]\n        temp ="]],"start1":3084,"start2":3084,"length1":33,"length2":33},{"diffs":[[0,"    "],[-1,"temp"],[1,"prs"],[0," = c0"],[-1," * 0.5 + c1 * temp;"],[1,"0 + prs * (c10 + prs * (c20 + prs * c30)) +\n            scaledT * c01 + scaledT * prs * (c11 + prs * c21)"],[0,"\n   "]],"start1":3107,"start2":3107,"length1":36,"length2":121},{"diffs":[[0,"\n        return "],[-1,"temp"],[1,"prs"],[0,";\n    }\n\n    // "]],"start1":3224,"start2":3224,"length1":36,"length2":35},{"diffs":[[0,"prs;\n    }\n\n"],[1,"\n"],[0,"    // main\n"]],"start1":3240,"start2":3240,"length1":24,"length2":25},{"diffs":[[0,") {\n"],[-1,"        let rawPressure = read24BitData(0x00); // Replace 0x00 with actual register\n"],[0,"    "]],"start1":3416,"start2":3416,"length1":92,"length2":8},{"diffs":[[0,"egister\n"],[-1,"\n"],[0,"        "]],"start1":3499,"start2":3499,"length1":17,"length2":16},{"diffs":[[0,"  scaled"],[-1,"Press"],[1,"Temp"],[0," = calcu"]],"start1":3513,"start2":3513,"length1":21,"length2":20},{"diffs":[[0,"late"],[-1,"Pressure(rawPressure, rawTemperature);"],[1,"Temperature(rawTemperature);\n\n        let rawPressure = read24BitData(0x00); // Replace 0x00 with actual register"],[0,"\n   "]],"start1":3533,"start2":3533,"length1":46,"length2":121},{"diffs":[[0,"r\n        scaled"],[-1,"Temp"],[1,"Press"],[0," = calculateTemp"]],"start1":3649,"start2":3649,"length1":36,"length2":37},{"diffs":[[0,"late"],[-1,"Temperature(rawTemperature"],[1,"Pressure(rawPressure, scaledTemp"],[0,");\n\n"]],"start1":3678,"start2":3678,"length1":34,"length2":40}]}]},{"timestamp":1728646617882,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"FACTORS["],[-1,"1"],[1,"0"],[0,"]\n      "]],"start1":2874,"start2":2874,"length1":17,"length2":17},{"diffs":[[0,"lace 0x0"],[-1,"3"],[1,"7"],[0," with ac"]],"start1":3592,"start2":3592,"length1":17,"length2":17}]}]},{"timestamp":1728647254303,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,") {\n"],[-1,"        pins.i2cWriteNumber(ADDRESS, (0x06 << 8) | PRESS_CONF, NumberFormat.UInt16BE);\n"],[0,"    "]],"start1":3448,"start2":3448,"length1":95,"length2":8}]}]},{"timestamp":1728647262155,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0,"(coef[0] << "],[-1,"4"],[1,"8"],[0,") | (coef[1]"]],"start1":1637,"start2":1637,"length1":25,"length2":25},{"diffs":[[0," & 0x0F) << "],[-1,"4"],[1,"8"],[0,") | coef[2],"]],"start1":1712,"start2":1712,"length1":25,"length2":25},{"diffs":[[0,"f[3] << "],[-1,"12"],[1,"8"],[0,") | (coe"]],"start1":1776,"start2":1776,"length1":18,"length2":17},{"diffs":[[0,"f[4] << "],[-1,"4"],[1,"8"],[0,") | (coe"]],"start1":1793,"start2":1793,"length1":17,"length2":17},{"diffs":[[0,"er(ADDRESS, (0x0"],[-1,"8"],[1,"6"],[0," << 8) | 0x02, N"]],"start1":3477,"start2":3477,"length1":33,"length2":33},{"diffs":[[0,") | "],[-1,"0x02"],[1,"PRESS_CONF"],[0,", Nu"]],"start1":3499,"start2":3499,"length1":12,"length2":18},{"diffs":[[0," let raw"],[-1,"Temperat"],[1,"Press"],[0,"ure = re"]],"start1":3546,"start2":3546,"length1":24,"length2":21},{"diffs":[[0,"Data(0x0"],[-1,"3"],[1,"0"],[0,"); // Re"]],"start1":3574,"start2":3574,"length1":17,"length2":17},{"diffs":[[0,"lace 0x0"],[-1,"3"],[1,"0"],[0," with ac"]],"start1":3592,"start2":3592,"length1":17,"length2":17},{"diffs":[[0,"ster"],[-1,"\n\n        pins.i2cWriteNumber(ADDRESS, (0x08 << 8) | 0x01, NumberFormat.UInt16BE);"],[0,"\n   "]],"start1":3618,"start2":3618,"length1":90,"length2":8},{"diffs":[[0,"\n        let raw"],[-1,"Press"],[1,"Temperat"],[0,"ure = read24BitD"]],"start1":3622,"start2":3622,"length1":37,"length2":40},{"diffs":[[0,"ead24BitData(0x0"],[-1,"0"],[1,"3"],[0,"); // Replace 0x"]],"start1":3653,"start2":3653,"length1":33,"length2":33},{"diffs":[[0,"; // Replace 0x0"],[-1,"0"],[1,"3"],[0," with actual reg"]],"start1":3671,"start2":3671,"length1":33,"length2":33},{"diffs":[[0,"egister\n"],[-1,"      "],[0,"\n       "]],"start1":3702,"start2":3702,"length1":22,"length2":16}]}]},{"timestamp":1728647847168,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"iables><"],[1,"block type=\"device_button_event\" x=\"0\" y=\"0\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetTemprature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"267\" y=\"0\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetPressure\"></block></value></block></statement></block><block type=\"device_forever\" x=\"0\" y=\"176\"></block><"],[0,"/xml>"]],"start1":71,"start2":71,"length1":13,"length2":552}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_DPS310.GetTemprature())\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.showNumber(IML_DPS310.GetPressure())\n})\nbasic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":1,"length2":227}]},{"type":"edited","filename":"dps310.ts","patch":[{"diffs":[[0," & 0x0F) << "],[-1,"8"],[1,"4"],[0,") | coef[2],"]],"start1":1712,"start2":1712,"length1":25,"length2":25},{"diffs":[[0," & 0x0F) << "],[-1,"16"],[1,"8"],[0,") | (coef[6]"]],"start1":1866,"start2":1866,"length1":26,"length2":25},{"diffs":[[0,"PS310()\n"],[-1,"    basic.pause(10)\n"],[0,"    read"]],"start1":3333,"start2":3333,"length1":36,"length2":16},{"diffs":[[0,"s()\n"],[-1,"    basic.pause(10)\n\n"],[0,"    "]],"start1":3371,"start2":3371,"length1":29,"length2":8},{"diffs":[[0,");\n\n        "],[-1,"basic.pause(10"],[1,"console.log(scaledPress"],[0,")\n    })\n}\n"]],"start1":3920,"start2":3920,"length1":37,"length2":46}]}]},{"timestamp":1728648605556,"editorVersion":"7.0.42","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":246,"start2":246,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// テストはここに来ます。このパッケージが拡張機能として使用されるときにはコンパイルされません。\n"}]}],"snapshots":[{"timestamp":1728628200420,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"DPS310\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1728630055673,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block><block type=\"device_button_event\" x=\"124\" y=\"173\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"IML_DPS310_GetTemprature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"406\" y=\"175\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow><block type=\"IML_DPS310_GetPressure\"></block></value></block></statement></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_DPS310.GetTemprature())\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.showNumber(IML_DPS310.GetPressure())\n})\nbasic.forever(function () {\n\t\n})\n","README.md":"","dps310.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"DPS310\"\nnamespace IML_DPS310\n{\n    //% block\n    //% block=\"気圧\"\n    //% weight=100    \n    export function GetPressure(): number {\n        return Math.round(readPressure() * 10) / 10\n    }\n    //% block\n    //% block=\"温度\"\n    //% weight=100    \n    export function GetTemprature(): number {\n        return Math.round(readTemperature() * 10) / 10\n    }\n\n    let DPS310_ADDR = 0x77\n    let PRESSURE_REG_ADDR = 0x00  // プレッシャーデータの開始アドレス\n    let TEMP_REG_ADDR = 0x03      // 温度データの開始アドレス\n    initDPS310()\n    \n    // DPS310の初期化\n    function initDPS310() {\n        // 必要に応じて初期設定を行います\n        // ここでは初期設定に必要なコマンドを送信します\n        pins.i2cWriteNumber(DPS310_ADDR, 0x06, NumberFormat.UInt8BE)\n        basic.pause(10)\n    }\n\n    // 3バイトのデータを読み取り、24ビットに変換する関数\n    function read24BitData(register: number): number {\n        pins.i2cWriteNumber(DPS310_ADDR, register, NumberFormat.UInt8BE)\n\n        let msb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE) << 16\n        let csb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE) << 8\n        let lsb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE)\n        console.log(msb)\n        console.log(csb)\n        console.log(lsb)\n\n        let rawData = msb | csb | lsb\n        // 符号を判定（24ビット符号付き整数）\n        if (rawData & 0x800000) {\n            rawData = rawData - 0x1000000\n        }\n        return rawData\n    }\n\n    // DPS310から気圧を取得する関数\n    function readPressure(): number {\n        let rawPressure = read24BitData(PRESSURE_REG_ADDR)\n        let pressure = rawPressure / 100  // 補正。実際にはデータシートに基づく補正が必要です\n        return pressure\n    }\n\n    // DPS310から温度を取得する関数\n    function readTemperature(): number {\n        let rawTemp = read24BitData(TEMP_REG_ADDR)\n        let temperature = rawTemp / 100  // 補正。実際にはデータシートに基づく補正が必要です\n        return temperature\n    }\n}\n","pxt.json":"{\n    \"name\": \"DPS310\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"dps310.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1728631893154,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"20\" y=\"20\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetTemprature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"287\" y=\"20\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetPressure\"></block></value></block></statement></block><block type=\"device_forever\" x=\"20\" y=\"196\"></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_DPS310.GetTemprature())\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.showNumber(IML_DPS310.GetPressure())\n})\nbasic.forever(function () {\n\t\n})\n","README.md":"","dps310.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"DPS310\"\nnamespace IML_DPS310\n{\n    //% block\n    //% block=\"気圧\"\n    //% weight=100    \n    export function GetPressure(): number {\n        return Math.round(readPressure() * 10) / 10\n    }\n    //% block\n    //% block=\"温度\"\n    //% weight=100    \n    export function GetTemprature(): number {\n        return Math.round(readTemperature() * 10) / 10\n    }\n\n\n    let DPS310_ADDR = 0x77; // I2C address for DPS310\n    let DPS310_RESET = 0x0C;\n    let DPS310_PRODREVID = 0x0D;\n    let DPS310_MEASCFG = 0x08;\n    let DPS310_TEMP_CFG = 0x09;\n    let DPS310_PRS_CFG = 0x06;\n    let DPS310_CFG_REG = 0x09;\n    let DPS310_COEF = 0x10; // Calibration coefficients start here\n\n    // Calibration coefficients\n    let c0 = 0\n    let c1 = 0\n    let c00 = 0\n    let c10 = 0\n    let c01 = 0\n    let c11 = 0\n    let c20 = 0\n    let c21 = 0\n    let c30 = 0;\n\n    // Utility function for 2's complement conversion\n    function twosComplement(value:number, bits:number) {\n        if (value & (1 << (bits - 1))) {\n            value -= (1 << bits);\n        }\n        return value;\n    }\n\n    // Initialize DPS310\n    function initializeDPS310() {\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_RESET, NumberFormat.UInt8BE);\n        basic.pause(10); // Wait for reset\n\n        // Read and validate product ID\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_PRODREVID, NumberFormat.UInt8BE);\n        let prodID = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        if (prodID !== 0x10) {\n            serial.writeLine(\"DPS310 not found!\");\n            return;\n        }\n\n        resetDPS310();\n        readCalibrationCoefficients();\n        configureSensor();\n    }\n\n    // Reset DPS310\n    function resetDPS310() {\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_RESET, NumberFormat.UInt8BE);\n        basic.pause(10); // Allow time to reset\n    }\n\n    // Read calibration coefficients\n    function readCalibrationCoefficients() {\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_COEF, NumberFormat.UInt8BE);\n        let coef = pins.i2cReadBuffer(DPS310_ADDR, 18);\n        c0 = twosComplement((coef[0] << 4) | (coef[1] >> 4), 12);\n        c1 = twosComplement(((coef[1] & 0x0F) << 8) | coef[2], 12);\n        c00 = twosComplement((coef[3] << 12) | (coef[4] << 4) | (coef[5] >> 4), 20);\n        c10 = twosComplement(((coef[5] & 0x0F) << 16) | (coef[6] << 8) | coef[7], 20);\n        c01 = twosComplement((coef[8] << 8) | coef[9], 16);\n        c11 = twosComplement((coef[10] << 8) | coef[11], 16);\n        c20 = twosComplement((coef[12] << 8) | coef[13], 16);\n        c21 = twosComplement((coef[14] << 8) | coef[15], 16);\n        c30 = twosComplement((coef[16] << 8) | coef[17], 16);\n    }\n\n    // Configure the sensor\n    function configureSensor() {\n        // Example setup - adjust to preferred settings\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_PRS_CFG, NumberFormat.UInt8BE); // Pressure config\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_TEMP_CFG, NumberFormat.UInt8BE); // Temperature config\n    }\n\n    // Read temperature\n    function readTemperature() {\n        let rawTemp = readRawData(DPS310_TEMP_CFG);\n        return calculateTemperature(rawTemp);\n    }\n\n    // Read pressure\n    function readPressure() {\n        let rawPressure = readRawData(DPS310_MEASCFG);\n        return calculatePressure(rawPressure);\n    }\n\n    // Read raw data from a specific register\n   function readRawData(register:number) {\n        pins.i2cWriteNumber(DPS310_ADDR, register, NumberFormat.UInt8BE);\n\n        let msb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        let csb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        let lsb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n\n        // Reassemble into 24-bit value and handle as signed 24-bit\n        let rawData = (msb << 16) | (csb << 8) | lsb;\n        if (rawData & 0x800000) { // If the 24th bit is set, the value is negative\n            rawData -= 0x1000000;\n        }\n        return rawData;\n    }\n\n    // Calculate temperature\n    function calculateTemperature(rawTemp:number) {\n        return c0 + c1 * rawTemp;\n    }\n\n    // Calculate pressure\n    function calculatePressure(rawPressure:number) {\n        return c00 + rawPressure * (c10 + rawPressure * (c20 + rawPressure * c30));\n    }\n\n    // Initialize sensor\n    initializeDPS310();\n}\n","pxt.json":"{\n    \"name\": \"DPS310\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"dps310.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1728634196947,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"20\" y=\"20\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetTemprature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"287\" y=\"20\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetPressure\"></block></value></block></statement></block><block type=\"device_forever\" x=\"20\" y=\"196\"></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_DPS310.GetTemprature())\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.showNumber(IML_DPS310.GetPressure())\n})\nbasic.forever(function () {\n\t\n})\n","README.md":"","dps310.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"DPS310\"\nnamespace IML_DPS310\n{\n    //% block\n    //% block=\"気圧\"\n    //% weight=100    \n    export function GetPressure(): number {\n        return Math.round(readPressure() * 10) / 10\n    }\n    //% block\n    //% block=\"温度\"\n    //% weight=100    \n    export function GetTemprature(): number {\n        return Math.round(readTemperature() * 10) / 10\n    }\n\n\n    let DPS310_ADDR = 0x77; // I2C address for DPS310\n    let DPS310_RESET = 0x0C;\n    let DPS310_PRODREVID = 0x0D;\n    let DPS310_MEASCFG = 0x08;\n    let DPS310_TEMP_CFG = 0x09;\n    let DPS310_PRS_CFG = 0x06;\n    let DPS310_CFG_REG = 0x09;\n    let DPS310_COEF = 0x10; // Calibration coefficients start here\n\n    // Calibration coefficients\n    let c0 = 0\n    let c1 = 0\n    let c00 = 0\n    let c10 = 0\n    let c01 = 0\n    let c11 = 0\n    let c20 = 0\n    let c21 = 0\n    let c30 = 0;\n\n    // Utility function for 2's complement conversion\n    function twosComplement(value:number, bits:number) {\n        if (value & (1 << (bits - 1))) {\n            value -= (1 << bits);\n        }\n        return value;\n    }\n\n    // Initialize DPS310\n    function initializeDPS310() {\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_RESET, NumberFormat.UInt8BE);\n        basic.pause(10); // Wait for reset\n\n        // Read and validate product ID\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_PRODREVID, NumberFormat.UInt8BE);\n        let prodID = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        if (prodID !== 0x10) {\n            serial.writeLine(\"DPS310 not found!\");\n            return;\n        }\n\n        resetDPS310();\n        readCalibrationCoefficients();\n        configureSensor();\n    }\n\n    // Reset DPS310\n    function resetDPS310() {\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_RESET, NumberFormat.UInt8BE);\n        basic.pause(10); // Allow time to reset\n    }\n\n    // Read calibration coefficients\n    function readCalibrationCoefficients() {\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_COEF, NumberFormat.UInt8BE);\n        let coef = pins.i2cReadBuffer(DPS310_ADDR, 18);\n        c0 = twosComplement((coef[0] << 4) | (coef[1] >> 4), 12);\n        c1 = twosComplement(((coef[1] & 0x0F) << 8) | coef[2], 12);\n        c00 = twosComplement((coef[3] << 12) | (coef[4] << 4) | (coef[5] >> 4), 20);\n        c10 = twosComplement(((coef[5] & 0x0F) << 16) | (coef[6] << 8) | coef[7], 20);\n        c01 = twosComplement((coef[8] << 8) | coef[9], 16);\n        c11 = twosComplement((coef[10] << 8) | coef[11], 16);\n        c20 = twosComplement((coef[12] << 8) | coef[13], 16);\n        c21 = twosComplement((coef[14] << 8) | coef[15], 16);\n        c30 = twosComplement((coef[16] << 8) | coef[17], 16);\n    }\n\n    // Configure the sensor\n    function configureSensor() {\n        // Example setup - adjust to preferred settings\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_PRS_CFG, NumberFormat.UInt8BE); // Pressure config\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_TEMP_CFG, NumberFormat.UInt8BE); // Temperature config\n    }\n\n    // Read temperature\n    function readTemperature() {\n        let rawTemp = readRawData(DPS310_TEMP_CFG);\n        return calculateTemperature(rawTemp);\n    }\n\n    // Read pressure\n    function readPressure() {\n        let rawPressure = readRawData(DPS310_MEASCFG);\n        return calculatePressure(rawPressure);\n    }\n\n    // Read raw data from a specific register\n   function readRawData(register:number) {\n        pins.i2cWriteNumber(DPS310_ADDR, register, NumberFormat.UInt8BE);\n\n        let msb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        let csb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        let lsb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n\n        // Reassemble into 24-bit value and handle as signed 24-bit\n        let rawData = (msb << 16) | (csb << 8) | lsb;\n        if (rawData & 0x800000) { // If the 24th bit is set, the value is negative\n            rawData -= 0x1000000;\n        }\n        return rawData;\n    }\n\n    // Calculate temperature\n    function calculateTemperature(rawTemp:number) {\n        let dat = c0 + c1 * rawTemp;\n        console.log(dat)\n        return dat\n    }\n\n    // Calculate pressure\n    function calculatePressure(rawPressure:number) {\n        let dat = c00 + rawPressure * (c10 + rawPressure * (c20 + rawPressure * c30));\n        console.log(dat)\n        return dat\n    }\n\n    // Initialize sensor\n    initializeDPS310();\n}\n","pxt.json":"{\n    \"name\": \"DPS310\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"dps310.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1728636100652,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"0\" y=\"0\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetTemprature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"267\" y=\"0\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetPressure\"></block></value></block></statement></block><block type=\"device_forever\" x=\"0\" y=\"176\"></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_DPS310.GetTemprature())\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.showNumber(IML_DPS310.GetPressure())\n})\nbasic.forever(function () {\n\t\n})\n","README.md":"","dps310.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"DPS310\"\nnamespace IML_DPS310\n{\n    //% block\n    //% block=\"気圧\"\n    //% weight=100    \n    export function GetPressure(): number {\n        console.log(10000)\n        return Math.round(readPressure() * 10) / 10\n    }\n    //% block\n    //% block=\"温度\"\n    //% weight=100    \n    export function GetTemprature(): number {\n        console.log(10001)\n        return Math.round(readTemperature() * 10) / 10\n    }\n\n\n    let DPS310_ADDR = 0x77; // I2C address for DPS310\n    let DPS310_RESET = 0x0C;\n    let DPS310_PRODREVID = 0x0D;\n    let DPS310_MEASCFG = 0x07;\n    let DPS310_TEMP_CFG = 0xF0;\n    let DPS310_PRS_CFG = 0x71;\n    let DPS310_CFG_REG = 0x09;\n    let DPS310_COEF = 0x10; // Calibration coefficients start here\n\n    // Calibration coefficients\n    let c0 = 0\n    let c1 = 0\n    let c00 = 0\n    let c10 = 0\n    let c01 = 0\n    let c11 = 0\n    let c20 = 0\n    let c21 = 0\n    let c30 = 0;\n\n    // Utility function for 2's complement conversion\n    function twosComplement(value:number, bits:number) {\n        if (value & (1 << (bits - 1))) {\n            value -= (1 << bits);\n        }\n        return value;\n    }\n\n    // Initialize DPS310\n    function initializeDPS310() {\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_RESET, NumberFormat.UInt8BE);\n        basic.pause(10); // Wait for reset\n\n        // Read and validate product ID\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_PRODREVID, NumberFormat.UInt8BE);\n        let prodID = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        if (prodID !== 0x10) {\n            console.log(\"DPS310 not found!\");\n            return;\n        }\n\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_RESET, NumberFormat.UInt8BE);\n        basic.pause(10); // Allow time to reset\n\n        readCalibrationCoefficients();\n\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_PRS_CFG, NumberFormat.UInt8BE); // Pressure config\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_TEMP_CFG, NumberFormat.UInt8BE); // Temperature config\n    }\n\n    // Reset DPS310\n    function resetDPS310() {\n    }\n\n    // Read calibration coefficients\n    function readCalibrationCoefficients() {\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_COEF, NumberFormat.UInt8BE);\n        let coef = pins.i2cReadBuffer(DPS310_ADDR, 18);\n        c0 = twosComplement((coef[0] << 8) | (coef[1] >> 4), 12);\n        c1 = twosComplement(((coef[1] & 0x0F) << 8) | coef[2], 12);\n        c00 = twosComplement((coef[3] << 8) | (coef[4] << 8) | (coef[5] >> 4), 20);\n        c10 = twosComplement(((coef[5] & 0x0F) << 8) | (coef[6] << 8) | coef[7], 20);\n        c01 = twosComplement((coef[8] << 8) | coef[9], 16);\n        c11 = twosComplement((coef[10] << 8) | coef[11], 16);\n        c20 = twosComplement((coef[12] << 8) | coef[13], 16);\n        c21 = twosComplement((coef[14] << 8) | coef[15], 16);\n        c30 = twosComplement((coef[16] << 8) | coef[17], 16);\n    }\n\n    // Read temperature\n    function readTemperature() {\n        let rawTemp = readRawData(DPS310_TEMP_CFG);\n        return calculateTemperature(rawTemp);\n    }\n\n    // Read pressure\n    function readPressure() {\n        let rawPressure = readRawData(DPS310_MEASCFG);\n        return calculatePressure(rawPressure);\n    }\n\n    // Read raw data from a specific register\n   function readRawData(register:number) {\n        pins.i2cWriteNumber(DPS310_ADDR, register, NumberFormat.UInt8BE);\n\n        let msb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        let csb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        let lsb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n\n        // Reassemble into 24-bit value and handle as signed 24-bit\n        let rawData = (msb << 16) | (csb << 8) | lsb;\n        if (rawData & 0x800000) { // If the 24th bit is set, the value is negative\n            rawData -= 0x1000000;\n        }\n        console.log(rawData)\n        return rawData;\n    }\n\n    // Calculate temperature\n    function calculateTemperature(rawTemp:number) {\n        let dat = c0 + c1 * rawTemp;\n        console.log(dat)\n        return dat\n    }\n\n    // Calculate pressure\n    function calculatePressure(rawPressure:number) {\n        let dat = c00 + rawPressure * (c10 + rawPressure * (c20 + rawPressure * c30));\n        console.log(dat)\n        return dat\n    }\n\n    // Initialize sensor\n    initializeDPS310();\n}\n","pxt.json":"{\n    \"name\": \"DPS310\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"dps310.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1728638845629,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"0\" y=\"0\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetTemprature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"267\" y=\"0\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetPressure\"></block></value></block></statement></block><block type=\"device_forever\" x=\"0\" y=\"176\"></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_DPS310.GetTemprature())\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.showNumber(IML_DPS310.GetPressure())\n})\nbasic.forever(function () {\n\t\n})\n","README.md":"","dps310.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"DPS310\"\nnamespace IML_DPS310\n{\n    //% block\n    //% block=\"気圧\"\n    //% weight=100    \n    export function GetPressure(): number {\n        console.log(10000)\n        return Math.round(readPressure() * 10) / 10\n    }\n    //% block\n    //% block=\"温度\"\n    //% weight=100    \n    export function GetTemprature(): number {\n        console.log(10001)\n        return Math.round(readTemperature() * 10) / 10\n    }\n\n\n    let DPS310_ADDR = 0x77; // I2C address for DPS310\n    let DPS310_RESET = 0x0C;\n    let DPS310_PRODREVID = 0x0D;\n    let DPS310_PRS_CFG = 0x06;\n    let DPS310_TEMP_CFG = 0x07;\n    let DPS310_MEASCFG = 0x08;\n    let DPS310_CFG_REG = 0x09;\n    let DPS310_COEF = 0x10; // Calibration coefficients start here\n\n    // Calibration coefficients\n    let c0 = 0\n    let c1 = 0\n    let c00 = 0\n    let c10 = 0\n    let c01 = 0\n    let c11 = 0\n    let c20 = 0\n    let c21 = 0\n    let c30 = 0;\n\n    // Utility function for 2's complement conversion\n    function twosComplement(value:number, bits:number) {\n        if (value & (1 << (bits - 1))) {\n            value -= (1 << bits);\n        }\n        return value;\n    }\n\n    // Initialize DPS310\n    function initializeDPS310() {\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_RESET, NumberFormat.UInt8BE);\n        basic.pause(10); // Wait for reset\n\n        // Read and validate product ID\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_PRODREVID, NumberFormat.UInt8BE);\n        let prodID = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        if (prodID !== 0x10) {\n            console.log(\"DPS310 not found!\");\n            return;\n        }\n\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_RESET, NumberFormat.UInt8BE);\n        basic.pause(10); // Allow time to reset\n        readCalibrationCoefficients();\n\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_PRS_CFG, NumberFormat.UInt8BE); // Pressure config\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_TEMP_CFG, NumberFormat.UInt8BE); // Temperature config\n    }\n\n    // Reset DPS310\n    function resetDPS310() {\n    }\n\n    // Read calibration coefficients\n    function readCalibrationCoefficients() {\n        pins.i2cWriteNumber(DPS310_ADDR, DPS310_COEF, NumberFormat.UInt8BE);\n        let coef = pins.i2cReadBuffer(DPS310_ADDR, 18);\n        c0 = twosComplement((coef[0] << 8) | (coef[1] >> 4), 12);\n        c1 = twosComplement(((coef[1] & 0x0F) << 8) | coef[2], 12);\n        c00 = twosComplement((coef[3] << 8) | (coef[4] << 8) | (coef[5] >> 4), 20);\n        c10 = twosComplement(((coef[5] & 0x0F) << 8) | (coef[6] << 8) | coef[7], 20);\n        c01 = twosComplement((coef[8] << 8) | coef[9], 16);\n        c11 = twosComplement((coef[10] << 8) | coef[11], 16);\n        c20 = twosComplement((coef[12] << 8) | coef[13], 16);\n        c21 = twosComplement((coef[14] << 8) | coef[15], 16);\n        c30 = twosComplement((coef[16] << 8) | coef[17], 16);\n    }\n\n    // Read temperature\n    function readTemperature() {\n        let rawTemp = readRawData(DPS310_TEMP_CFG);\n        return calculateTemperature(rawTemp);\n    }\n\n    // Read pressure\n    function readPressure() {\n        let rawPressure = readRawData(DPS310_MEASCFG);\n        return calculatePressure(rawPressure);\n    }\n\n    // Read raw data from a specific register\n   function readRawData(register:number) {\n        pins.i2cWriteNumber(DPS310_ADDR, register, NumberFormat.UInt8BE);\n\n        let msb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        let csb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n        let lsb = pins.i2cReadNumber(DPS310_ADDR, NumberFormat.UInt8BE);\n\n        // Reassemble into 24-bit value and handle as signed 24-bit\n        let rawData = (msb << 16) | (csb << 8) | lsb;\n        if (rawData & 0x800000) { // If the 24th bit is set, the value is negative\n            rawData -= 0x1000000;\n        }\n        console.log(rawData)\n        return rawData;\n    }\n\n    // Calculate temperature\n    function calculateTemperature(rawTemp:number) {\n        let dat = c0 + c1 * rawTemp;\n        console.log(dat)\n        return dat\n    }\n\n    // Calculate pressure\n    function calculatePressure(rawPressure:number) {\n        let dat = c00 + rawPressure * (c10 + rawPressure * (c20 + rawPressure * c30));\n        console.log(dat)\n        return dat\n    }\n\n    // Initialize sensor\n    initializeDPS310();\n}\n","pxt.json":"{\n    \"name\": \"DPS310\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"dps310.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1728640649457,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"0\" y=\"0\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetTemprature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"267\" y=\"0\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetPressure\"></block></value></block></statement></block><block type=\"device_forever\" x=\"0\" y=\"176\"></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_DPS310.GetTemprature())\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.showNumber(IML_DPS310.GetPressure())\n})\nbasic.forever(function () {\n\t\n})\n","README.md":"","dps310.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"DPS310\"\nnamespace IML_DPS310\n{\n    //% block\n    //% block=\"気圧\"\n    //% weight=100    \n    export function GetPressure(): number {\n        return Math.round(readPressure() * 10) / 10\n    }\n    //% block\n    //% block=\"温度\"\n    //% weight=100    \n    export function GetTemprature(): number {\n        return Math.round(readTemperature() * 10) / 10\n    }\n\n\n    let ADDRESS = 0x77;\n    let PRESS_CONF = 0x71;\n    let TEMP_CONF = 0xF0;\n    let INT_AND_FIFO_CONF = 0x00;\n    let OP_MODE = 0x07;\n    let SCALE_FACTORS = [524288, 1572864, 3670016, 7864320, 253952, 516096, 1040384, 2088960];\n\n    // Calibration coefficients\n    let c0=0, c1=0, c00=0, c10=0, c01=0, c11=0, c20=0, c21=0, c30=0;\n\n    // 2's complement conversion for calibration data\n    function twosComplement(value:number, bits:number) {\n        if (value & (1 << (bits - 1))) {\n            value -= (1 << bits);\n        }\n        return value;\n    }\n\n    // Initialize DPS310 sensor\n    function initializeDPS310() {\n        pins.i2cWriteNumber(ADDRESS, 0x06, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(ADDRESS, PRESS_CONF, NumberFormat.UInt8BE);\n\n        pins.i2cWriteNumber(ADDRESS, 0x07, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(ADDRESS, TEMP_CONF, NumberFormat.UInt8BE);\n\n        pins.i2cWriteNumber(ADDRESS, 0x09, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(ADDRESS, INT_AND_FIFO_CONF, NumberFormat.UInt8BE);\n\n        pins.i2cWriteNumber(ADDRESS, 0x08, NumberFormat.UInt8BE);\n        pins.i2cWriteNumber(ADDRESS, OP_MODE, NumberFormat.UInt8BE);\n    }\n\n    // Read calibration coefficients from DPS310\n    function readCalibrationCoefficients() {\n        pins.i2cWriteNumber(ADDRESS, 0x10, NumberFormat.UInt8BE);\n        let coef = pins.i2cReadBuffer(ADDRESS, 18);\n\n        c0 = twosComplement((coef[0] << 8) | (coef[1] >> 4), 12);\n        c1 = twosComplement(((coef[1] & 0x0F) << 8) | coef[2], 12);\n        c00 = twosComplement((coef[3] << 8) | (coef[4] << 8) | (coef[5] >> 4), 20);\n        c10 = twosComplement(((coef[5] & 0x0F) << 8) | (coef[6] << 8) | coef[7], 20);\n        c01 = twosComplement((coef[8] << 8) | coef[9], 16);\n        c11 = twosComplement((coef[10] << 8) | coef[11], 16);\n        c20 = twosComplement((coef[12] << 8) | coef[13], 16);\n        c21 = twosComplement((coef[14] << 8) | coef[15], 16);\n        c30 = twosComplement((coef[16] << 8) | coef[17], 16);\n    }\n\n    // Read 24-bit raw data from a register\n    function read24BitData(register:number) {\n        pins.i2cWriteNumber(ADDRESS, register, NumberFormat.UInt8BE);\n\n        let msb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n        let csb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n        let lsb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n\n        let rawData = (msb << 16) | (csb << 8) | lsb;\n        if (rawData & 0x800000) {\n            rawData -= 0x1000000;\n        }\n        return rawData;\n    }\n\n    // Calculate pressure using calibration coefficients\n    function calculatePressure(rawPressure:number, scaledT:number) {\n        let prs = rawPressure / SCALE_FACTORS[1]\n        prs = c00 + prs * (c10 + prs * (c20 + prs * c30)) +\n            scaledT * c01 + scaledT * prs * (c11 + prs * c21)\n        return prs;\n    }\n\n    // Calculate temperature using calibration coefficients\n    function calculateTemperature(rawTemperature:number) {\n        let temp = c0 * rawTemperature + c1;\n        return temp / SCALE_FACTORS[0];\n    }\n\n    let scaledTemp = 0\n    let scaledPress = 0\n    function readSensor()\n    {\n        let rawTemperature = read24BitData(0x07); // Replace 0x07 with actual register\n        scaledTemp = calculateTemperature(rawTemperature);\n\n        let rawPressure = read24BitData(0x00); // Replace 0x00 with actual register\n        scaledPress = calculatePressure(rawPressure, scaledTemp);\n    }\n\n\n    // main\n    initializeDPS310()\n    readCalibrationCoefficients()\n}\n","pxt.json":"{\n    \"name\": \"DPS310\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"dps310.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1728642529634,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"0\" y=\"0\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetTemprature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"267\" y=\"0\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetPressure\"></block></value></block></statement></block><block type=\"device_forever\" x=\"0\" y=\"176\"></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_DPS310.GetTemprature())\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.showNumber(IML_DPS310.GetPressure())\n})\nbasic.forever(function () {\n\t\n})\n","README.md":"","dps310.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"DPS310\"\nnamespace IML_DPS310\n{\n    //% block\n    //% block=\"気圧\"\n    //% weight=100    \n    export function GetPressure(): number {\n        readSensor()\n        return Math.round(scaledPress * 10) / 10\n    }\n    //% block\n    //% block=\"温度\"\n    //% weight=100    \n    export function GetTemprature(): number {\n        readSensor()\n        return Math.round(scaledTemp * 10) / 10\n    }\n\n\n    let ADDRESS = 0x77;\n    let PRESS_CONF = 0x71;\n    let TEMP_CONF = 0xF0;\n    let INT_AND_FIFO_CONF = 0x00;\n    let OP_MODE = 0x07;\n    let SCALE_FACTORS = [524288, 1572864, 3670016, 7864320, 253952, 516096, 1040384, 2088960];\n\n    // Calibration coefficients\n    let c0=0, c1=0, c00=0, c10=0, c01=0, c11=0, c20=0, c21=0, c30=0;\n\n    // 2's complement conversion for calibration data\n    function twosComplement(value:number, bits:number) {\n        if (value & (1 << (bits - 1))) {\n            value -= (1 << bits);\n        }\n        return value;\n    }\n\n    // Initialize DPS310 sensor\n    function initializeDPS310() {\n        pins.i2cWriteNumber(ADDRESS, (0x06 << 8) | PRESS_CONF, NumberFormat.UInt16BE);\n        pins.i2cWriteNumber(ADDRESS, (0x07 << 8) | TEMP_CONF, NumberFormat.UInt16BE);\n        pins.i2cWriteNumber(ADDRESS, (0x09 << 8) | INT_AND_FIFO_CONF, NumberFormat.UInt16BE);\n        pins.i2cWriteNumber(ADDRESS, (0x08 << 8) | OP_MODE, NumberFormat.UInt16BE);\n    }\n\n    // Read calibration coefficients from DPS310\n    function readCalibrationCoefficients() {\n        pins.i2cWriteNumber(ADDRESS, 0x10, NumberFormat.UInt8BE);\n        let coef = pins.i2cReadBuffer(ADDRESS, 18);\n\n        c0 = twosComplement((coef[0] << 8) | (coef[1] >> 4), 12);\n        c1 = twosComplement(((coef[1] & 0x0F) << 8) | coef[2], 12);\n        c00 = twosComplement((coef[3] << 8) | (coef[4] << 8) | (coef[5] >> 4), 20);\n        c10 = twosComplement(((coef[5] & 0x0F) << 8) | (coef[6] << 8) | coef[7], 20);\n        c01 = twosComplement((coef[8] << 8) | coef[9], 16);\n        c11 = twosComplement((coef[10] << 8) | coef[11], 16);\n        c20 = twosComplement((coef[12] << 8) | coef[13], 16);\n        c21 = twosComplement((coef[14] << 8) | coef[15], 16);\n        c30 = twosComplement((coef[16] << 8) | coef[17], 16);\n    }\n\n    // Read 24-bit raw data from a register\n    function read24BitData(register:number) {\n        pins.i2cWriteNumber(ADDRESS, register, NumberFormat.UInt8BE);\n\n        let msb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n        let csb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n        let lsb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n\n        let rawData = (msb << 16) | (csb << 8) | lsb;\n        rawData = twosComplement(rawData,24)\n        return rawData;\n    }\n\n    // Calculate pressure using calibration coefficients\n    function calculatePressure(rawPressure:number, scaledT:number) {\n        let prs = rawPressure / SCALE_FACTORS[1]\n        prs = c00 + prs * (c10 + prs * (c20 + prs * c30)) +\n            scaledT * c01 + scaledT * prs * (c11 + prs * c21)\n        return prs;\n    }\n\n    // Calculate temperature using calibration coefficients\n    function calculateTemperature(rawTemperature:number) {\n        let temp = rawTemperature / SCALE_FACTORS[0]\n        temp = c0 * 0.5 + c1 * temp;\n        return temp;\n    }\n\n    let scaledTemp = 0\n    let scaledPress = 0\n    function readSensor()\n    {\n        let rawTemperature = read24BitData(0x03); // Replace 0x07 with actual register\n        scaledTemp = calculateTemperature(rawTemperature);\n        \n        let rawPressure = read24BitData(0x00); // Replace 0x00 with actual register\n        scaledPress = calculatePressure(rawPressure, scaledTemp);\n        console.log(scaledPress)\n    }\n\n    // main\n    basic.pause(10)\n    initializeDPS310()\n    readCalibrationCoefficients()\n}\n","pxt.json":"{\n    \"name\": \"DPS310\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"dps310.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1728644789926,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"0\" y=\"0\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetTemprature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"267\" y=\"0\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetPressure\"></block></value></block></statement></block><block type=\"device_forever\" x=\"0\" y=\"176\"></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_DPS310.GetTemprature())\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.showNumber(IML_DPS310.GetPressure())\n})\nbasic.forever(function () {\n\t\n})\n","README.md":"","dps310.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"DPS310\"\nnamespace IML_DPS310\n{\n    //% block\n    //% block=\"気圧\"\n    //% weight=100    \n    export function GetPressure(): number {\n        return Math.round(scaledPress * 10) / 10\n    }\n    //% block\n    //% block=\"温度\"\n    //% weight=100    \n    export function GetTemprature(): number {\n        return Math.round(scaledTemp * 10) / 10\n    }\n\n\n    let ADDRESS = 0x77;\n    let PRESS_CONF = 0x71;\n    let TEMP_CONF = 0xF0;\n    let INT_AND_FIFO_CONF = 0x00;\n    let OP_MODE = 0x07;\n    let SCALE_FACTORS = [524288, 1572864, 3670016, 7864320, 253952, 516096, 1040384, 2088960];\n\n    // Calibration coefficients\n    let c0=0, c1=0, c00=0, c10=0, c01=0, c11=0, c20=0, c21=0, c30=0;\n\n    // 2's complement conversion for calibration data\n    function twosComplement(value:number, bits:number) {\n        if (value & (1 << (bits - 1))) {\n            value -= (1 << bits);\n        }\n        return value;\n    }\n\n    // Initialize DPS310 sensor\n    function initializeDPS310() {\n        pins.i2cWriteNumber(ADDRESS, (0x06 << 8) | PRESS_CONF, NumberFormat.UInt16BE);\n        pins.i2cWriteNumber(ADDRESS, (0x07 << 8) | TEMP_CONF, NumberFormat.UInt16BE);\n        pins.i2cWriteNumber(ADDRESS, (0x09 << 8) | INT_AND_FIFO_CONF, NumberFormat.UInt16BE);\n        pins.i2cWriteNumber(ADDRESS, (0x08 << 8) | OP_MODE, NumberFormat.UInt16BE);\n    }\n\n    // Read calibration coefficients from DPS310\n    function readCalibrationCoefficients() {\n        pins.i2cWriteNumber(ADDRESS, 0x10, NumberFormat.UInt8BE);\n        let coef = pins.i2cReadBuffer(ADDRESS, 18);\n\n        c0 = twosComplement((coef[0] << 8) | (coef[1] >> 4), 12);\n        c1 = twosComplement(((coef[1] & 0x0F) << 8) | coef[2], 12);\n        c00 = twosComplement((coef[3] << 8) | (coef[4] << 8) | (coef[5] >> 4), 20);\n        c10 = twosComplement(((coef[5] & 0x0F) << 8) | (coef[6] << 8) | coef[7], 20);\n        c01 = twosComplement((coef[8] << 8) | coef[9], 16);\n        c11 = twosComplement((coef[10] << 8) | coef[11], 16);\n        c20 = twosComplement((coef[12] << 8) | coef[13], 16);\n        c21 = twosComplement((coef[14] << 8) | coef[15], 16);\n        c30 = twosComplement((coef[16] << 8) | coef[17], 16);\n    }\n\n    // Read 24-bit raw data from a register\n    function read24BitData(register:number) {\n        pins.i2cWriteNumber(ADDRESS, register, NumberFormat.UInt8BE);\n\n        let msb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n        let csb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n        let lsb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n\n        let rawData = (msb << 16) | (csb << 8) | lsb;\n        rawData = twosComplement(rawData,24)\n        return rawData;\n    }\n\n    // Calculate temperature using calibration coefficients\n    function calculateTemperature(rawT: number) {\n        let temp = rawT / SCALE_FACTORS[0]\n        temp = c0 * 0.5 + c1 * temp;\n        return temp;\n    }\n\n    // Calculate pressure using calibration coefficients\n    function calculatePressure(rawP:number, scaledT:number) {\n        let prs = rawP / SCALE_FACTORS[1]\n        prs = c00 + prs * (c10 + prs * (c20 + prs * c30)) +\n            scaledT * c01 + scaledT * prs * (c11 + prs * c21)\n        return prs;\n    }\n\n\n    // main\n    basic.pause(10)\n    initializeDPS310()\n    readCalibrationCoefficients()\n    let scaledTemp = 0\n    let scaledPress = 0\n    basic.forever(function() {\n        let rawTemperature = read24BitData(0x03); // Replace 0x07 with actual register\n        scaledTemp = calculateTemperature(rawTemperature);\n\n        let rawPressure = read24BitData(0x00); // Replace 0x00 with actual register\n        scaledPress = calculatePressure(rawPressure, scaledTemp);\n\n        console.log(scaledTemp)\n    })\n}\n","pxt.json":"{\n    \"name\": \"DPS310\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"dps310.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1728646617882,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_button_event\" x=\"0\" y=\"0\"><field name=\"NAME\">Button.A</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetTemprature\"></block></value></block></statement></block><block type=\"device_button_event\" x=\"267\" y=\"0\"><field name=\"NAME\">Button.B</field><statement name=\"HANDLER\"><block type=\"device_show_number\"><value name=\"number\"><block type=\"IML_DPS310_GetPressure\"></block></value></block></statement></block><block type=\"device_forever\" x=\"0\" y=\"176\"></block></xml>","main.ts":"input.onButtonPressed(Button.A, function () {\n    basic.showNumber(IML_DPS310.GetTemprature())\n})\ninput.onButtonPressed(Button.B, function () {\n    basic.showNumber(IML_DPS310.GetPressure())\n})\nbasic.forever(function () {\n\t\n})\n","README.md":"","dps310.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"DPS310\"\nnamespace IML_DPS310\n{\n    //% block\n    //% block=\"気圧\"\n    //% weight=100    \n    export function GetPressure(): number {\n        return Math.round(scaledPress * 10) / 10\n    }\n    //% block\n    //% block=\"温度\"\n    //% weight=100    \n    export function GetTemprature(): number {\n        return Math.round(scaledTemp * 10) / 10\n    }\n\n\n    let ADDRESS = 0x77;\n    let PRESS_CONF = 0x71;\n    let TEMP_CONF = 0xF0;\n    let INT_AND_FIFO_CONF = 0x00;\n    let OP_MODE = 0x07;\n    let SCALE_FACTORS = [524288, 1572864, 3670016, 7864320, 253952, 516096, 1040384, 2088960];\n\n    // Calibration coefficients\n    let c0=0, c1=0, c00=0, c10=0, c01=0, c11=0, c20=0, c21=0, c30=0;\n\n    // 2's complement conversion for calibration data\n    function twosComplement(value:number, bits:number) {\n        if (value & (1 << (bits - 1))) {\n            value -= (1 << bits);\n        }\n        return value;\n    }\n\n    // Initialize DPS310 sensor\n    function initializeDPS310() {\n        pins.i2cWriteNumber(ADDRESS, (0x06 << 8) | PRESS_CONF, NumberFormat.UInt16BE);\n        pins.i2cWriteNumber(ADDRESS, (0x07 << 8) | TEMP_CONF, NumberFormat.UInt16BE);\n        pins.i2cWriteNumber(ADDRESS, (0x09 << 8) | INT_AND_FIFO_CONF, NumberFormat.UInt16BE);\n        pins.i2cWriteNumber(ADDRESS, (0x08 << 8) | OP_MODE, NumberFormat.UInt16BE);\n    }\n\n    // Read calibration coefficients from DPS310\n    function readCalibrationCoefficients() {\n        pins.i2cWriteNumber(ADDRESS, 0x10, NumberFormat.UInt8BE);\n        let coef = pins.i2cReadBuffer(ADDRESS, 18);\n\n        c0 = twosComplement((coef[0] << 8) | (coef[1] >> 4), 12);\n        c1 = twosComplement(((coef[1] & 0x0F) << 8) | coef[2], 12);\n        c00 = twosComplement((coef[3] << 8) | (coef[4] << 8) | (coef[5] >> 4), 20);\n        c10 = twosComplement(((coef[5] & 0x0F) << 8) | (coef[6] << 8) | coef[7], 20);\n        c01 = twosComplement((coef[8] << 8) | coef[9], 16);\n        c11 = twosComplement((coef[10] << 8) | coef[11], 16);\n        c20 = twosComplement((coef[12] << 8) | coef[13], 16);\n        c21 = twosComplement((coef[14] << 8) | coef[15], 16);\n        c30 = twosComplement((coef[16] << 8) | coef[17], 16);\n    }\n\n    // Read 24-bit raw data from a register\n    function read24BitData(register:number) {\n        pins.i2cWriteNumber(ADDRESS, register, NumberFormat.UInt8BE);\n\n        let msb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n        let csb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n        let lsb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n\n        let rawData = (msb << 16) | (csb << 8) | lsb;\n        rawData = twosComplement(rawData,24)\n        return rawData;\n    }\n\n    // Calculate pressure using calibration coefficients\n    function calculatePressure(rawP:number, rawT:number) {\n        let prs = rawP / SCALE_FACTORS[1]\n        let tmp = rawT / SCALE_FACTORS[0]\n        prs = c00 + prs * (c10 + prs * (c20 + prs * c30)) +\n            tmp * c01 + tmp * prs * (c11 + prs * c21)\n        return prs;\n    }\n    // Calculate temperature using calibration coefficients\n    function calculateTemperature(rawT: number) {\n        let temp = rawT / SCALE_FACTORS[0]\n        temp = c0 * 0.5 + c1 * temp;\n        return temp;\n    }\n\n    // main\n    basic.pause(10)\n    initializeDPS310()\n    readCalibrationCoefficients()\n    let scaledTemp = 0\n    let scaledPress = 0\n    basic.forever(function() {\n        let rawPressure = read24BitData(0x00); // Replace 0x00 with actual register\n        let rawTemperature = read24BitData(0x03); // Replace 0x07 with actual register\n\n        scaledPress = calculatePressure(rawPressure, rawTemperature);\n        scaledTemp = calculateTemperature(rawTemperature);\n\n        console.log(scaledPress)\n    })\n}\n","pxt.json":"{\n    \"name\": \"DPS310\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"dps310.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1728648605556,"editorVersion":"7.0.42","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables></xml>","main.ts":"\n","README.md":"","dps310.ts":"/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\" block=\"DPS310\"\nnamespace IML_DPS310\n{\n    //% block\n    //% block=\"気圧\"\n    //% weight=100    \n    export function GetPressure(): number {\n        return Math.round(scaledPress * 10) / 10\n    }\n    //% block\n    //% block=\"温度\"\n    //% weight=100    \n    export function GetTemprature(): number {\n        return Math.round(scaledTemp * 10) / 10\n    }\n\n\n    let ADDRESS = 0x77;\n    let PRESS_CONF = 0x71;\n    let TEMP_CONF = 0xF0;\n    let INT_AND_FIFO_CONF = 0x00;\n    let OP_MODE = 0x07;\n    let SCALE_FACTORS = [524288, 1572864, 3670016, 7864320, 253952, 516096, 1040384, 2088960];\n\n    // Calibration coefficients\n    let c0=0, c1=0, c00=0, c10=0, c01=0, c11=0, c20=0, c21=0, c30=0;\n\n    // 2's complement conversion for calibration data\n    function twosComplement(value:number, bits:number) {\n        if (value & (1 << (bits - 1))) {\n            value -= (1 << bits);\n        }\n        return value;\n    }\n\n    // Initialize DPS310 sensor\n    function initializeDPS310() {\n        pins.i2cWriteNumber(ADDRESS, (0x06 << 8) | PRESS_CONF, NumberFormat.UInt16BE);\n        pins.i2cWriteNumber(ADDRESS, (0x07 << 8) | TEMP_CONF, NumberFormat.UInt16BE);\n        pins.i2cWriteNumber(ADDRESS, (0x09 << 8) | INT_AND_FIFO_CONF, NumberFormat.UInt16BE);\n        pins.i2cWriteNumber(ADDRESS, (0x08 << 8) | OP_MODE, NumberFormat.UInt16BE);\n    }\n\n    // Read calibration coefficients from DPS310\n    function readCalibrationCoefficients() {\n        pins.i2cWriteNumber(ADDRESS, 0x10, NumberFormat.UInt8BE);\n        let coef = pins.i2cReadBuffer(ADDRESS, 18);\n\n        c0 = twosComplement((coef[0] << 4) | (coef[1] >> 4), 12);\n        c1 = twosComplement(((coef[1] & 0x0F) << 8) | coef[2], 12);\n        c00 = twosComplement((coef[3] << 12) | (coef[4] << 4) | (coef[5] >> 4), 20);\n        c10 = twosComplement(((coef[5] & 0x0F) << 16) | (coef[6] << 8) | coef[7], 20);\n        c01 = twosComplement((coef[8] << 8) | coef[9], 16);\n        c11 = twosComplement((coef[10] << 8) | coef[11], 16);\n        c20 = twosComplement((coef[12] << 8) | coef[13], 16);\n        c21 = twosComplement((coef[14] << 8) | coef[15], 16);\n        c30 = twosComplement((coef[16] << 8) | coef[17], 16);\n    }\n\n    // Read 24-bit raw data from a register\n    function read24BitData(register:number) {\n        pins.i2cWriteNumber(ADDRESS, register, NumberFormat.UInt8BE);\n\n        let msb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n        let csb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n        let lsb = pins.i2cReadNumber(ADDRESS, NumberFormat.UInt8BE);\n\n        let rawData = (msb << 16) | (csb << 8) | lsb;\n        rawData = twosComplement(rawData,24)\n        return rawData;\n    }\n\n    // Calculate pressure using calibration coefficients\n    function calculatePressure(rawP:number, rawT:number) {\n        let prs = rawP / SCALE_FACTORS[1]\n        let tmp = rawT / SCALE_FACTORS[0]\n        prs = c00 + prs * (c10 + prs * (c20 + prs * c30)) +\n            tmp * c01 + tmp * prs * (c11 + prs * c21)\n        return prs;\n    }\n    // Calculate temperature using calibration coefficients\n    function calculateTemperature(rawT: number) {\n        let temp = rawT / SCALE_FACTORS[0]\n        temp = c0 * 0.5 + c1 * temp;\n        return temp;\n    }\n\n    // main\n    basic.pause(10)\n    initializeDPS310()\n    basic.pause(10)\n    readCalibrationCoefficients()\n    basic.pause(10)\n\n    let scaledTemp = 0\n    let scaledPress = 0\n    basic.forever(function() {\n        pins.i2cWriteNumber(ADDRESS, (0x08 << 8) | 0x02, NumberFormat.UInt16BE);\n        let rawTemperature = read24BitData(0x03); // Replace 0x03 with actual register\n\n        pins.i2cWriteNumber(ADDRESS, (0x08 << 8) | 0x01, NumberFormat.UInt16BE);\n        let rawPressure = read24BitData(0x00); // Replace 0x00 with actual register\n      \n        scaledPress = calculatePressure(rawPressure, rawTemperature);\n        scaledTemp = calculateTemperature(rawTemperature);\n\n        basic.pause(10)\n    })\n}\n","pxt.json":"{\n    \"name\": \"DPS310\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"dps310.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1728648605559}